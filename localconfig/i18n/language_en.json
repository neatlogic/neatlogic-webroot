{
  "common": {
    "action": "Action type",
    "actiontime": "Operation time",
    "actiontype": "Operation type",
    "actionuser": "Operator",
    "alertattr": "Alarm Properties",
    "alertdetail": "Alarm details",
    "alertlevel": "Alarm level",
    "alertlink": "Alarm External Link",
    "alertlist": "Alarm List",
    "alerttime": "Alarm time",
    "alertvalue": "Alarm value",
    "all": "All",
    "anchorpoint": "Anchor point",
    "attachment": "attachment",
    "attributelist": "Attribute List",
    "attrname": "Attribute Name",
    "authlist": "Authorization List",
    "basicauth": "Basic authentication",
    "bearerauth": "Bearer Token",
    "boolean": "Boolean type",
    "branch": "branch",
    "bug": "defect",
    "buildinauth": "Internal verification",
    "cacheandvalid": "Cache but revalidate",
    "catalog": "catalogue",
    "catalogid": "Directory ID",
    "catalogname": "Directory Name",
    "children": "subset",
    "cnname": "Chinese name",
    "color": "colour",
    "comment": "comment",
    "commentcount": "Number of comments",
    "condition": "Condition configuration",
    "config": "allocation",
    "configlist": "Configuration List",
    "content": "content",
    "count": "quantity",
    "create": "establish",
    "createdate": "Created on",
    "createrobject": "Creator Object",
    "createtime": "Creation time",
    "createuser": "creator",
    "createusername": "Creator Name",
    "currentpage": "Current Page",
    "customattribute": "Custom Properties",
    "date": "date",
    "datetime": "Date Time",
    "defaultvalue": "Default Value List",
    "delaytime": "delay time ",
    "dependency": "rely on",
    "description": "describe",
    "displaymode": "display mode",
    "displaytype": "Display Type",
    "double": "Double-precision floating-point format",
    "dropdownlist": "Dropdown selection",
    "edit": "modify",
    "editdate": "modification date",
    "editmode": "Editing mode",
    "editor": "Modified by",
    "editorname": "Modifier Name",
    "editorobject": "Modifier Object",
    "email": "mailbox",
    "emailnotify": "Email notification",
    "embed": "built-in",
    "enddate": "End date",
    "endtime": "End time",
    "enum": "enumeration",
    "event": "event",
    "example": "example",
    "expired": "overdue",
    "expireddays": "Number of timeout days",
    "failedcount": "Number of errors",
    "file": "file",
    "fileid": "File ID",
    "filelist": "Attachment List",
    "filename": "file name",
    "fileparamname": "Attachment parameter name",
    "filepath": "File Path",
    "filetype": "Attachment Type",
    "focususerlist": "List of followers",
    "focususeruuidlist": "List of followers\u0027 uuids",
    "group": "grouping",
    "icon": "icon",
    "id": "id",
    "inputfrom": "Update method",
    "inputfromname": "Change method name",
    "int": "int",
    "isactive": "Activate or not",
    "isdeleted": "Has it been deleted",
    "isend": "Completed or not",
    "isexpired": "Expired or not",
    "isfavoried": "Favorite or not",
    "isfile": "Is it a file",
    "isfocus": "Have you followed",
    "ismycreated": "Do I create",
    "isneedpage": "Do you need pagination",
    "isneedpriority": "Display priority",
    "isoverride": "Overwrite or not",
    "isregister": "Register or not",
    "isrequired": "Is it mandatory",
    "isshow": "Display or not",
    "isunique": "Is it unique",
    "iteration": "iteration",
    "jsonarray": "JSON array",
    "jsonobject": "JSON object",
    "key": "key",
    "keyword": "keyword",
    "level": "level",
    "loglist": "Log List",
    "long": "long integer",
    "mailaddress": "Email address",
    "matrix": "matrix",
    "memo": "Remarks",
    "menu": "menu",
    "messagenotify": "Message notification",
    "mobile": "Mobile terminal",
    "modulegroup": "Module group",
    "mustinput": "Required",
    "name": "name",
    "needscore": "Do you need to score",
    "newvalue": "New value",
    "noauth": "No certification required",
    "nocache": "No cache",
    "notifytype": "Notification Type",
    "number": "number",
    "object": "Any object",
    "oldvalue": "Old value",
    "packagename": "Package Name",
    "pagecount": "page count",
    "pagesize": "page size",
    "parentid": "Parent ID",
    "password": "password",
    "pc": "Computer side",
    "phone": "Telephone number",
    "priority": "priority",
    "prioritycolor": "Priority Color",
    "priorityname": "Priority Name",
    "priorityuuid": "Priority uuid",
    "privatecache": "Private cache",
    "progress": "schedule",
    "publiccache": "Public cache",
    "regex": "regular expression ",
    "relname": "Relationship Name",
    "reltype": "Relationship Type",
    "request": "demand",
    "role": "role",
    "roleuuidlist": "Role uuid List",
    "rownum": "Data Entry",
    "scoreinfo": "Rating information",
    "sort": "sort",
    "source": "source",
    "sourcename": "Source Chinese Name",
    "startdate": "Start date",
    "starttime": "start time",
    "status": "state",
    "statuscolor": "Status Color",
    "statusinfo": "status information ",
    "statusname": "Status Name",
    "statusuniquename": "State Unique Identification",
    "string": "character string",
    "tablelist": "Table List",
    "tag": "label",
    "taglist": "Label List",
    "task": "task",
    "tbodylist": "tbody list",
    "team": "group",
    "teamuuidlist": "User group uuid list",
    "tel": "Mobile phone number",
    "templateid": "Template ID",
    "testcase": "test case",
    "testenv": "testing environment",
    "testplan": "test plan",
    "text": "text",
    "textbox": "Text Box",
    "theadlist": "thead list",
    "time": "time",
    "timecost": "time consuming",
    "timeoutpoint": "Time out point",
    "title": "title",
    "toomanyoption": "Too many options, other options will not be displayed",
    "trigger": "Trigger point",
    "triggertime": "Trigger time",
    "triggertype": "Trigger type",
    "type": "type",
    "typeid": "Type ID",
    "typeuuid": "type uuid",
    "unique": "only",
    "uniquename": "Unique identification",
    "upwardnamelist": "Upper level name list",
    "user": "user",
    "userid": "User ID",
    "useridlist": "User ID List",
    "userinfolist": "User Information List",
    "userlist": "User List",
    "username": "User Name",
    "usertype": "customer type",
    "useruuid": "User uuid",
    "useruuidlist": "User uuid list",
    "uuid": "Uuid",
    "validcode": "Registration verification code",
    "validtype": "Verification method",
    "value": "value",
    "versionid": "Version ID",
    "wechatnotify": "WeChat notification",
    "worker": "Processed by",
    "worktimename": "Working Time Window Name",
    "worktimeuuid": "Working Time Window Uuid"
  },
  "nfac": {
    "autoexectenantconfig": {
      "autoexecjoblogencoding": "Automation job log Character encoding set",
      "maxnumofcombopversion": "The maximum number of versions of the combination tool, such as setting a maximum of 10 versions, will automatically delete the oldest and inactive version when creating and saving the 11th version."
    }
  },
  "nfal": {
    "matrix_modify": {
      "getauthdisplayname": "Matrix Management Permissions",
      "getauthintroduction": "Adding, modifying, and deleting matrices"
    }
  },
  "nfc": {
    "frameworktenantconfig": {
      "apiqps": "Peak number of requests sent to the server per second (regardless of interface)"
    }
  },
  "nfd": {
    "licensevo": {
      "entityfield": {
        "name": {
          "dburl": "Database URL",
          "enddate": "Service Termination Date",
          "expirationdate": "expiration date ",
          "graceperiod": "Grace days",
          "isend": "Whether to terminate the service",
          "isvalid": "Is it legal",
          "modules": "Module List",
          "purchaser": "Customer Name"
        }
      }
    }
  },
  "nfdc": {
    "deploytenantconfig": {
      "gitlabwebhookcallbackhost": "Gitlab webhook callback host address"
    }
  },
  "nfde": {
    "documentonlinenotfoundexception": {
      "documentonlinenotfoundexception": "Online help document: {0} does not exist"
    }
  },
  "nfet": {
    "paramjsonirregularexception": {
      "paramjsonirregularexception": "The parameter is not in a valid JSON format"
    },
    "tenantconfignotfoundexception": {
      "tenantconfignotfoundexception": "Configuration information: {0} does not exist"
    }
  },
  "nfpc": {
    "itsmtenantconfig": {
      "displaymodeaftertimeout": "Display method after work order timeout, optional values naturalTime | workTime",
      "processtaskstepenablecomment": "Work order step reply function"
    }
  },
  "nfral": {
    "priority_manage": {
      "getauthdisplayname": "Priority management permissions",
      "getauthintroduction": "Adding, editing, and deleting priorities"
    },
    "template_manage": {
      "getauthdisplayname": "Project Template Management Permissions",
      "getauthintroduction": "Editing and deleting project templates allows you to save existing projects as templates."
    }
  },
  "nfrd": {
    "appvo": {
      "entityfield": {
        "name": {
          "hasissue": "Does it include tasks",
          "hasiteration": "Is it associated with iteration"
        }
      }
    },
    "issuevo": {
      "entityfield": {
        "name": {
          "isleader": "Is it the project leader",
          "ismember": "Is it a project member",
          "isowner": "Project owner or not",
          "webhooklist": "Webhook List"
        }
      }
    },
    "issuewebhookvo": {
      "entityfield": {
        "name": "Data ID"
      }
    },
    "projecttemplateapptypevo": {
      "entityfield": {
        "name": {
          "apptypename": "Application Type Name"
        }
      }
    },
    "projecttemplatevo": {
      "entityfield": {
        "name": {
          "apptypelist": "Application Type List"
        }
      }
    },
    "projectuservo": {
      "entityfield": {
        "name": "User Type List"
      }
    },
    "projectvo": {
      "entityfield": {
        "name": {
          "isleader": "Is the current user a project administrator",
          "ismember": "Is the current user a project member",
          "isowner": "Is the current user the project owner"
        }
      }
    },
    "webhookdatavo": {
      "entityfield": {
        "name": "mail"
      }
    }
  },
  "nfre": {
    "apptype": {
      "getenumname": "Project Object Type"
    },
    "priorityisinusedexception": {
      "priorityisinusedexception": "Priority {0} is currently in use"
    },
    "prioritynameisexistsexception": {
      "prioritynameisexistsexception": "Priority {0} already exists"
    },
    "projectnotauthexception": {
      "projectnotauthexception": "You do not have permission to modify project \u0027{0}\u0027"
    },
    "projectnotfoundexception": {
      "projectnotfoundexception": "Project \u0027{0}\u0027 does not exist",
      "theprojectnotfoundexception": "Project does not exist"
    },
    "projectusertype": {
      "getenumname": "Project User Type"
    },
    "systemattrtype": "System Properties"
  },
  "nmaac": {
    "autoexeccombopversionsaveapi": {
      "getname": "Save the version information of the combination tool"
    }
  },
  "nmaaj": {
    "listautoexecjoblogencodingapi": {
      "getname": "Get automatic job log Character encoding set",
      "mydoservice": {
        "error": "Autoexec. job. log. encoding format is not JsonArray"
      }
    }
  },
  "nmcaa": {
    "deleteattrapi": {
      "getname": "Delete Model Properties"
    },
    "getattrapi": {
      "getname": "Get attribute details",
      "input": {
        "param": {
          "desc": {
            "id": "Attribute ID"
          }
        }
      }
    },
    "getattrlistapi": {
      "input": {
        "param": {
          "desc": {
            "idlist": "Attribute ID List"
          }
        }
      }
    },
    "getciattrlistapi": {
      "getname": "Obtain a list of model properties"
    },
    "listattrtypeapi": {
      "getname": "Get Property Type"
    },
    "saveattrapi": {
      "getname": "Save Model Properties",
      "input": {
        "param": {
          "desc": {
            "inputtype": "Input type, manual input | automatic discovery"
          }
        }
      }
    },
    "searchattrapi": {
      "getname": "Query Properties"
    }
  },
  "nmcab": {
    "deletebatchimportfileapi": {
      "getname": "Delete bulk import files"
    },
    "firebatchimportapi": {
      "getname": "Initiate bulk import",
      "input": {
        "param": {
          "desc": {
            "action": "Append: only add; Update: only update; All: Add\u0026Update"
          }
        }
      }
    },
    "getbatchimportauditapi": {
      "getname": "Obtain individual configuration item import logs"
    },
    "getbatchimportfilelistapi": {
      "getname": "Obtain batch import files"
    },
    "getimporttemplateapi": {
      "getname": "Download Configuration Item Import Template"
    },
    "searchbatchimportauditapi": {
      "getname": "Query batch import logs"
    },
    "stopbatchimportapi": {
      "getname": "Stop bulk import"
    },
    "uploadbatchimportfileapi": {
      "getname": "Upload batch import files"
    }
  },
  "nmcac": {
    "batchdeletecientityapi": {
      "getname": "Batch Delete Configuration Items",
      "input": {
        "param": {
          "desc": {
            "cientitylist": "Delete the list, including three attributes: ciId, ciEntityId, and ciEntityName",
            "needcommit": "Do you need to submit"
          }
        }
      }
    },
    "batchsavecientityapi": {
      "getname": "Save Configuration Item",
      "input": {
        "param": {
          "desc": {
            "issimple": "Is the data in a simple mode"
          },
          "help": {
            "issimple": "Simple mode is mainly used by third-party systems, true: Simple mode, false: Normal mode"
          }
        }
      }
    },
    "batchsavecientitysimpleapi": {
      "getname": "Batch Save Configuration Items (Simplified Version)"
    },
    "batchupdatecientityapi": {
      "getname": "Batch Modify Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrentitydata": "Properties that need to be modified",
            "cientityidlist": "Modified configuration item ID",
            "relentitydata": "Relationships that need to be modified"
          }
        }
      }
    },
    "deletealertlevelapi": {
      "getname": "Delete alarm level"
    },
    "deleteciapi": {
      "getname": "Delete Model"
    },
    "deletecientityapi": {
      "getname": "Delete Configuration Item"
    },
    "exportciapi": {
      "getname": "Export Configuration Item Model"
    },
    "exportcientityapi": {
      "getname": "Export Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrfilterlist": "Attribute filtering criteria",
            "idlist": "ID List",
            "relfilterlist": "Relationship filtering criteria",
            "showattrrellist": "List of fields to be exported, including attributes and relationships"
          }
        }
      }
    },
    "exportciforexcelapi": {
      "getname": "Export configuration item model and Property list"
    },
    "exportillegalcientityapi": {
      "getname": "Export non compliant configuration items"
    },
    "getalertlevelapi": {
      "getname": "Obtain alarm level"
    },
    "getciapi": {
      "getname": "Obtain model information",
      "input": {
        "param": {
          "desc": {
            "needaction": "Do you need to operate? If necessary, permission verification will be performed"
          }
        }
      }
    },
    "getciattrrellistapi": {
      "description": {
        "desc": "Obtain model information interface, which is mainly used for linking with ITSM forms"
      }
    },
    "getciauthapi": {
      "getname": "Obtain model authorization information"
    },
    "getcientityapi": {
      "getname": "Obtain configuration item details",
      "input": {
        "param": {
          "desc": {
            "limitattrentity": "Whether to limit the number of referenced attributes, default value is: true",
            "limitrelentity": "Whether to limit the number of relationships, default value is: true",
            "needaction": "Do you need an action column? If you need to check the operation permissions, the action column will be returned based on the results",
            "showattrrellist": "List of fields to be displayed, including attribute relationships and constants, format: attr_ Xxx, relfrom_ Xxx or relto_ Xxx, xxx is the corresponding ID"
          }
        }
      }
    },
    "getcientityauthapi": {
      "getname": "Obtain configuration item permission information",
      "input": {
        "param": {
          "desc": {
            "authlist": "List of permissions that need to be determined"
          }
        }
      }
    },
    "getcientitybaseinfolistapi": {
      "description": {
        "desc": "Obtain basic information of multiple configuration items based on the ID list"
      },
      "getname": "Obtain basic information for multiple configuration items",
      "input": {
        "param": {
          "desc": {
            "idlist": "Configuration Item ID List"
          }
        }
      }
    },
    "getcientitylistapi": {
      "description": {
        "desc": "Obtain detailed information of multiple configuration items based on the ID list interface"
      },
      "getname": "Obtain detailed information of multiple configuration items"
    },
    "getcitypeapi": {
      "getname": "Obtain model type information"
    },
    "getciuniqueapi": {
      "getname": "Returns a list of unique attribute IDs"
    },
    "getdownwardcilistapi": {
      "getname": "Obtain downstream model list"
    },
    "getillegalcientitycountapi": {
      "getname": "Obtain the number of non compliant configuration items"
    },
    "getimportfieldlistapi": {
      "getname": "Obtain a list of importable attributes and relationships"
    },
    "getpasswordattrplaintextapi": {
      "getname": "Obtain password attribute plaintext",
      "output": {
        "param": {
          "desc": "Password plaintext"
        }
      }
    },
    "importciapi": {
      "getname": "Import Configuration Item Model"
    },
    "listciapi": {
      "getname": "Return model list information (for dropdown boxes)"
    },
    "listcientityforselectapi": {
      "description": {
        "desc": "Query Content Center Status List"
      },
      "getname": "Query Model Data List (Dropdown Box)",
      "input": {
        "param": {
          "desc": {
            "defaultvalue": "Default Value List"
          }
        }
      },
      "output": {
        "param": {
          "desc": "Model Data List"
        }
      }
    },
    "listcientitystatusapi": {
      "getname": "Obtain configuration item alarm information"
    },
    "listcifortreeapi": {
      "description": {
        "desc": "Return the model tree list"
      },
      "getname": "Obtain a model tree list"
    },
    "listcitypeapi": {
      "getname": "Obtain a list of model types"
    },
    "listexpressionattrrelapi": {
      "getname": "Returns a list of model expression properties and relationships"
    },
    "resetattrentityindexapi": {
      "description": {
        "desc": "Rebuild the reference attribute index interface to optimize query performance"
      },
      "getname": "Rebuild Reference Attribute Index"
    },
    "resetrelentityindexapi": {
      "description": {
        "desc": "Rebuild the relational index interface to optimize query performance"
      },
      "getname": "Rebuild Relationship Index"
    },
    "savealertlevelapi": {
      "getname": "Save alarm level"
    },
    "saveallcitypeapi": {
      "getname": "Batch Save Model Types",
      "input": {
        "param": {
          "desc": {
            "citypelist": "Model Type List"
          }
        }
      }
    },
    "saveciapi": {
      "getname": "Save Model",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not provide a representative for adding a new model"
          }
        }
      }
    },
    "saveciauthapi": {
      "getname": "Save Model Authorization",
      "input": {
        "param": {
          "desc": {
            "authlist": "Authorization list, empty means clearing all authorizations. Example: {authType: \u0027user\u0027, authUuid: \u0027xxxx\u0027, action: \u0027cimaange\u0027}"
          }
        }
      }
    },
    "savecientityalertapi": {
      "getname": "Save Configuration Item Alert",
      "input": {
        "param": {
          "help": {
            "alertattr": "Each configuration item corresponds to an alarm attribute and can only have one alarm message",
            "alertlevel": "It must be an integer greater than or equal to 0. The higher the number, the higher the level. If it is equal to 0, it means the alarm is eliminated",
            "alerttime": "A timestamp needs to be provided, accurate to milliseconds. If not provided, the save time will be used",
            "cientityid": "If provided, it will be used first, and ciEntityUuid will only be used if the configuration item cannot be found",
            "uniquename": "If it is a 32 character hash, the system will directly save it. Otherwise, the system will perform hash processing first"
          }
        }
      }
    },
    "savecientityalertbatchapi": {
      "getname": "Batch save configuration item alarm",
      "input": {
        "param": {
          "help": "Use this parameter when saving data in bulk, and the parameter format is consistent with the requirements for a single alarm"
        }
      }
    },
    "savecinameattridapi": {
      "getname": "Save Model Name Properties"
    },
    "savecitypeapi": {
      "getname": "Save Model Type",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not exist to represent adding",
            "ismenu": "Is it displayed in the menu"
          }
        }
      }
    },
    "saveciuniqueruleapi": {
      "getname": "Save Model Unique Rules"
    },
    "searchalertlevelapi": {
      "getname": "Search alarm level"
    },
    "searchattrtargetcientityapi": {
      "getname": "Query Property Target Configuration Item",
      "input": {
        "param": {
          "desc": "Selected Value List"
        }
      },
      "output": {
        "param": {
          "desc": "Header information "
        }
      }
    },
    "searchciattrrellistapi": {
      "description": {
        "desc": "Search model properties and relationship information interface, mainly used for DSL input controls to search for properties and relationships"
      },
      "getname": "Search for model attributes and relationship information",
      "input": {
        "param": {
          "desc": {
            "keyword": "Keywords that only match unique identifiers of attributes and relationships"
          }
        }
      }
    },
    "searchcientityalertapi": {
      "getname": "Search for configuration item alarm information",
      "input": {
        "param": {
          "desc": {
            "groupidlist": "View ID List"
          },
          "help": {
            "groupidlist": "Cannot be empty at the same time as the configuration item id list",
            "idlist": "Cannot be empty at the same time as the view id list"
          }
        }
      }
    },
    "searchcientityapi": {
      "getname": "Query Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrid": "Relationship ID (used when querying reference properties through reference configuration items)",
            "cientitylist": "The configuration item result set, if provided, will not be searched, and will be returned directly after supplementing the header information",
            "condition": "A list of fields that need to be displayed, including attribute relationships and constants. For example, [ \"attr_xxx \":  \"keyword \",  \"relfrom_xxx \":  \"keyword \",  \"relto_xxx \":  \"keyword \",  \"const_ciid \":  \"keyword \"], where xxx represents the corresponding attribute or relationship ID",
            "direction": "The position of the current model in the relationship",
            "dsl": "DSL statement",
            "fromcientityid": "Reference configuration item ID (used when querying reference properties through reference configuration items)",
            "groupid": "Group ID",
            "idlist": "List of configuration item IDs that need to be queried",
            "isall": "Do you want to return all column data",
            "islimitattr": "Whether to restrict the returned reference attribute data",
            "islimitrel": "Whether to restrict the returned relationship data",
            "mode": "The dialog mode will not display detailed connections",
            "needaction": "Do you need an action column? If so, return the action column based on user permissions",
            "needactiontype": "Do you need an action type column, usually used in form controls to mark whether data is added, modified, or deleted",
            "needcheck": "Do you need a check column",
            "needexpand": "Do you need to display the expanded control column",
            "relcientityid": "Relationship configuration item ID",
            "relid": "Relationship ID",
            "sort": "Sort rules, example: { \"attr_xxxxx \":  \"DESC \",  \"attr_yyyyy \":  \"ASC \"}"
          }
        }
      }
    },
    "searchcientitybydslapi": {
      "getname": "Using DSL to query configuration items",
      "input": {
        "param": {
          "desc": {
            "attr": "The attributes that need to be returned. If not defined, all attributes will be returned. An empty array represents that no attributes will be returned",
            "dsl": "Query expression, Logical connective supports\u0026\u0026, | |, and relational operator supports:\u003d\u003d,\u003e\u003d,\u003c\u003d,\u003e,\u003c,!\u003d Include, exclude. If you need to search for relationship or reference attribute fields, you can use a.b representation, such as env. name\u003d\u003d \"STG \"\u0026\u0026(port\u003d\u003d80 | | port\u003d\u003d443)",
            "rel": "The relationships that need to be returned. If not defined, all relationships will be returned. An empty array represents that no relationships will be returned"
          }
        }
      }
    },
    "searchcitypeciapi": {
      "getname": "Obtain model types and model lists",
      "input": {
        "param": {
          "desc": {
            "cinamelist": "Model Name List",
            "isabstract": "Abstract model, 0: No, 1: Yes",
            "isvirtual": "Virtual model, 0: No, 1: Yes",
            "typeidlist": "Type ID List"
          }
        }
      }
    },
    "searchcustomviewdataapi": {
      "getname": "Query custom view data",
      "input": {
        "param": {
          "desc": {
            "groupby": "Uuid of grouping attributes",
            "mode": "Search mode, supporting both page and API, mainly affecting the returned data structure. Page is the default mode used for page display, and the API will return field names for API calls",
            "searchmode": "Normal: view list mode, group: view list group mode, data: data mode"
          }
        }
      },
      "output": {
        "param": {
          "desc": {
            "datalist": "Result Set"
          }
        }
      }
    },
    "searchdeletecientityapi": {
      "getname": "Query deleted configuration items"
    },
    "searchillegalcientityapi": {
      "getname": "Query non compliant configuration items"
    },
    "updaterelentityvaliddayapi": {
      "getname": "Update relationship validity days",
      "input": {
        "param": {
          "desc": "Valid days, 0 represents forever valid"
        }
      }
    },
    "validatecientityapi": {
      "getname": "Verify the integrity of configuration items",
      "input": {
        "param": {
          "desc": {
            "attr": "attribute data ",
            "id": "Configuration item ID, does not exist to represent adding",
            "rel": "Relationship data",
            "uuid": "Configuration item uuid"
          }
        }
      },
      "output": {
        "param": {
          "desc": {
            "needchange": "Is there any change"
          }
        }
      }
    }
  },
  "nmdac": {
    "savedeployciapi": {
      "getname": "Save Continuous Integration Configuration",
      "input": {
        "param": {
          "desc": {
            "reponame": "Warehouse name",
            "reposerveraddress": "Warehouse server address",
            "repotype": "Warehouse type",
            "versionrule": "Version number rules"
          }
        }
      }
    }
  },
  "nmdav": {
    "getdeployversioncvelistapi": {
      "getname": "Obtain version CVE vulnerability list"
    },
    "savedeployversioncvelistapi": {
      "getname": "Save version CVE vulnerability list"
    }
  },
  "nmeat": {
    "eventtypesaveapi": {
      "getname": "Save event type information",
      "input": {
        "param": {
          "desc": {
            "authoritylist": "Authorization object, multiple choices allowed, format [ \"common # alluser \",  \"user # userUuid \",  \"team # teamUuid \",  \"role # roleUuid \"]"
          }
        }
      }
    }
  },
  "nmfs": {
    "documentonlineinitializeindexhandler": {
      "executeforalltenant": {
        "error": "There are two files with the same path: {0}. Please rename one of the files or move it to a different path",
        "system_out_println": "The location of the online document index library is {0}",
        "warn_a": "The filePath field in the {1st} element of the {0} file has no value set",
        "warn_b": "The moduleGroup field in the {1st} element of the {0} file has no value set"
      },
      "getname": "Initialize online help document index"
    }
  },
  "nmft": {
    "createdatawarehousetableinithandler": {
      "getname": "Create a data warehouse dynamic table"
    }
  },
  "nmmam": {
    "masterusersaveapi": {
      "description": {
        "desc": "System User Save Interface"
      },
      "getname": "System User Save"
    }
  },
  "nmmar": {
    "sendvalidcodeapi": {
      "description": {
        "desc": "Send the registration verification code to the corresponding email address"
      },
      "getname": "Send registration verification code"
    }
  },
  "nmme": {
    "activeurlexpiredtimeexception": {
      "activeurlexpiredtimeexception": "The activation connection has expired"
    },
    "emailnotsupportexception": {
      "emailnotsupportexception": "This type of mailbox is not supported, please use corporate email"
    },
    "illegalactiveurlexception": {
      "illegalactiveurlexception": "Activation of account failed. The link is illegal. Please contact the administrator"
    }
  },
  "nmpap": {
    "processtaskstepgetapi": {
      "description": {
        "desc": "Interface for obtaining basic information of work order steps, including current step name, activation time, status, handler, assistance handler, processing time, form attribute display control, etc"
      },
      "getname": "Interface for obtaining basic information of work order steps"
    }
  },
  "nmpaw": {
    "searchworkcenterapi": {
      "description": {
        "desc": "Work Order Center Search Interface"
      },
      "getname": "Work Order Center Search Interface",
      "input": {
        "param": {
          "desc": {
            "conditionconfig": "Condition settings, if left blank, use the conditions saved in the database",
            "headerlist": "Displayed Fields"
          }
        }
      }
    }
  },
  "nmra": {
    "deletereportapi": {
      "getname": "Delete Report"
    },
    "getreporttypeapi": {
      "getname": "Obtain Report Classification"
    },
    "reportlistapi": {
      "description": {
        "desc": "Obtain a list of report definitions (template selection drop-down box for report instance editing panel)"
      },
      "getname": "Obtain a list of report definitions"
    },
    "savereportapi": {
      "getname": "Save Report Definition",
      "input": {
        "param": {
          "desc": {
            "sql": "Report Definition Data Source Configuration"
          }
        }
      }
    },
    "savewebhookdataapi": {
      "getname": "Accept Webhook push data",
      "input": {
        "param": {
          "desc": "token"
        }
      }
    },
    "searchreportapi": {
      "getname": "Query Report Definition"
    },
    "updatereportactiveapi": {
      "getname": "Change Report Definition Activation Status"
    }
  },
  "nmraa": {
    "activeappapi": {
      "getname": "Activate application"
    },
    "getallappapi": {
      "getname": "Get all application types"
    },
    "getappapi": {
      "getname": "Obtain application information",
      "input": {
        "param": {
          "desc": "Application ID"
        }
      }
    },
    "listprivateattrapi": {
      "getname": "Get all internal properties"
    },
    "listprojectappapi": {
      "getname": "Obtain project application list",
      "input": {
        "param": {
          "desc": {
            "ismine": "Do you want to only query the application list containing the current user\u0027s tasks",
            "ismyreported": "Whether to only query the application list reported by the current user",
            "needissuecount": "Do you need to return the number of tasks"
          }
        }
      }
    },
    "saveappconfigapi": {
      "getname": "Save application configuration"
    },
    "saveattrapi": {
      "getname": "Save Application Properties",
      "input": {
        "param": {
          "desc": {
            "id": "Attribute ID, does not provide a new representation"
          }
        }
      }
    },
    "searchprivateattrapi": {
      "getname": "Query application properties",
      "input": {
        "param": {
          "desc": {
            "needsystemattr": "Do you need system attributes"
          }
        }
      }
    },
    "unactiveappapi": {
      "getname": "Disable Application "
    },
    "updateappsortapi": {
      "getname": "Update app sorting"
    }
  },
  "nmrai": {
    "checkissueisfavoriteapi": {
      "getname": "Check if the task is being followed",
      "output": {
        "param": {
          "desc": "Whether to be followed, 0: No, 1: Yes"
        }
      }
    },
    "clearparentissueapi": {
      "getname": "Clear Parent Task Relationship"
    },
    "deletecommentapi": {
      "getname": "Delete Comment"
    },
    "deleteissuerelapi": {
      "getname": "Delete task association relationship"
    },
    "listrelissueidapi": {
      "getname": "Obtain a list of relationship task IDs"
    },
    "saveissueapi": {
      "getname": "Save Task",
      "input": {
        "param": {
          "desc": {
            "attrlist": "Custom Property list",
            "id": "ID, does not provide a representative for adding a task",
            "name": "Task Name"
          }
        }
      }
    },
    "searchissueapi": {
      "getname": "Search Task",
      "input": {
        "param": {
          "desc": {
            "fromid": "Source Task ID",
            "toid": "Target Task ID"
          }
        }
      }
    },
    "toggleissueisfavoriteapi": {
      "getname": "Switching task attention status",
      "input": {
        "param": {
          "desc": {
            "isfavorite": "Whether to follow"
          }
        }
      }
    }
  },
  "nmrap": {
    "deletepriorityapi": {
      "getname": "Delete Priority",
      "input": {
        "param": {
          "desc": "Priority ID"
        }
      }
    },
    "deleteprojectapi": {
      "getname": "delete item"
    },
    "listprojecttemplateapi": {
      "getname": "Obtain a list of project templates"
    },
    "listprojectuserapi": {
      "getname": "Obtain project user list"
    },
    "savepriorityapi": {
      "description": {
        "desc": "Save Priority"
      },
      "input": {
        "param": {
          "desc": {
            "id": "Priority ID, does not provide a representative for adding"
          }
        }
      }
    },
    "saveprojectapi": {
      "getname": "Save Project",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not provide a representative for adding new projects",
            "memberidlist": "List of project member IDs"
          }
        }
      }
    },
    "saveprojecttemplatefromprojectapi": {
      "getname": "Save Project as Template"
    },
    "saveprojectuserapi": {
      "getname": "Add Project User"
    },
    "searchprojectapi": {
      "getname": "Query items"
    },
    "updateprioritysortapi": {
      "getname": "Update priority sorting",
      "input": {
        "param": {
          "desc": {
            "prioritylist": "Priority List "
          }
        }
      }
    }
  },
  "nmrat": {
    "deleteprojecttemplateapi": {
      "getname": "Delete Project Template"
    },
    "getprojecttemplateapi": {
      "getname": "Obtain project template details"
    },
    "saveprojecttemplateapi": {
      "getname": "Save Project Template"
    }
  },
  "nmraw": {
    "getwebhookconfigapi": {
      "getname": "Obtain Webhook configuration"
    },
    "savewebhookconfigapi": {
      "getname": "Save webhook configuration"
    }
  },
  "nmrcaw": {
    "searchwebhookdataapi": {
      "getname": "Search for webhook data"
    }
  },
  "nmtad": {
    "adddocumentonlineconfigapi": {
      "getname": "Add mapping relationship between online help documents and module menus"
    },
    "deletedocumentonlineconfigapi": {
      "getname": "Delete the mapping relationship between online help documents and module menus"
    },
    "exportdocumentonlineconfigapi": {
      "getname": "Export online help document configuration file"
    },
    "getdocumentonlineapi": {
      "getname": "Obtain a single online help document"
    },
    "getdocumentonlinedirectoryapi": {
      "getname": "Online Help Document Directory"
    },
    "getdocumentonlinelistapi": {
      "getname": "Query the list of online help documents"
    },
    "getdocumentonlinetablelistapi": {
      "getname": "Display document list grouped by first level directory"
    },
    "getdocumentonlineunclassifiedlistapi": {
      "getname": "Query the list of unclassified online help documents"
    },
    "savedocumentonlineconfigapi": {
      "getname": "Save the mapping relationship between online help documents and module menus"
    },
    "searchdocumentonlineapi": {
      "getname": "Keyword search for online help documents",
      "mydoservice": {
        "error": "Unable to find document with docID {0}"
      }
    }
  },
  "nmtal": {
    "getlicenseapi": {
      "getname": "Obtaining License Information"
    }
  },
  "nmtam": {
    "exportmatrixapi": {
      "getname": "Export Matrix"
    },
    "importmatrixapi": {
      "getname": "Import Matrix",
      "output": {
        "param": {
          "desc": {
            "labelduplication": "Label already exists",
            "nameduplication": "Name already exists",
            "uuidduplication": "Same matrix exists"
          }
        }
      }
    },
    "matrixexportapi": {
      "getname": "Export matrix data"
    },
    "matriximportapi": {
      "getname": "Import matrix data"
    }
  },
  "nmtan": {
    "getnotifypolicydefaulttemplateapi": {
      "getname": "Obtain default template for notification policy trigger points"
    }
  },
  "nmtat": {
    "gettenantconfigapi": {
      "getname": "Obtain current tenant configuration information"
    },
    "listtenantconfigapi": {
      "getname": "List of current tenant configuration information"
    },
    "savetenantconfigapi": {
      "getname": "Save current tenant configuration information"
    }
  },
  "nmtau": {
    "userdeleteapi": {
      "getname": "Delete User Interface"
    },
    "usersaveapi": {
      "getname": "Save User Interface"
    }
  },
  "ocommn": {
    "isneedpage": "Do you need pagination"
  },
  "page": {
    "isclose": "Whether to close",
    "ismine": "Is it mine"
  },
  "term": {
    "autoexec": {
      "combopid": "Combination tool ID",
      "groupdesc": "Automation platform",
      "groupname": "Automation",
      "name": "Autoexec"
    },
    "change": {
      "name": "Change"
    },
    "cmdb": {
      "addid": "ID, do not provide a representative to add",
      "allowedit": "Allow editing",
      "appsystemid": "Application system ID",
      "attrconfig": "Attribute Configuration",
      "attridlist": "Model Attribute ID List",
      "attrtype": "Attribute Type",
      "cientitydata": "Configuration Item Data",
      "cientityid": "Configuration Item ID",
      "cientityuniquename": "Unique identification of configuration items",
      "ciid": "Model ID",
      "ciidlist": "Model ID List",
      "ciname": "Model Name",
      "ciuniquename": "Model Unique Identification",
      "groupdesc": "Configuration Management Platform",
      "groupname": "CMDB",
      "importauditid": "Import Record ID",
      "isabstractci": "Is it an abstract model",
      "iscommit": "Submit or not",
      "isprivateci": "Private model or not",
      "isshowinmenu": "Is it displayed in the menu",
      "issimpleattribute": "Is it a simple attribute",
      "isvirtualci": "Is it a virtual model",
      "moduleid": "Module ID",
      "name": "CMDB",
      "parentcientityid": "Parent Configuration Item ID",
      "relidlist": "Model Relationship ID List",
      "ruleid": "Rule ID",
      "targetciid": "Target Model ID",
      "transactiongroupid": "Transaction group ID",
      "transactionid": "Transaction ID",
      "validateconfig": "proof setup ",
      "validatehandler": "Verification component",
      "validatorid": "Validation Rule ID",
      "viewid": "View ID",
      "viewname": "View Name",
      "virtualcifileid": "Virtual model configuration file id"
    },
    "codehub": {
      "groupdesc": "Codehub platform",
      "name": "Codehub"
    },
    "dashboard": {
      "groupdesc": "Flexible and efficient Data and information visualization platform",
      "groupname": "Dashboard",
      "name": "Dashboard"
    },
    "deploy": {
      "confidence": "confidence",
      "cvecount": "CVE Count",
      "cvelist": "CVE vulnerability list",
      "evidencecount": "Evidence count",
      "groupdesc": "Standardized and fast continuous integration deployment platform",
      "groupname": "DevOps",
      "highestseverity": "Maximum Severity",
      "name": "DevOps",
      "vulnerabilityids": "Vulnerability ID"
    },
    "event": {
      "eventtypeid": "Saved Event Type ID",
      "name": "Event"
    },
    "framework": {
      "documentonlineinfo": "Online Help Document Information",
      "groupname": "Framework",
      "matrixuuid": "Matrix uuid",
      "name": "Framework",
      "notifypolicydefaulttemplateinfo": "Notification default template information",
      "policyid": "Notification Policy ID",
      "userotherinfo": "Other user information",
      "viplevel": "User level"
    },
    "inspect": {
      "groupdesc": "Inspection platform",
      "groupname": "Inspection",
      "name": "Inspection"
    },
    "itsm": {
      "caneditfocususer": "Do you have permission to modify the work order followers",
      "catalogname": "Directory name where the service is located",
      "channelinfo": "Service Information",
      "channelname": "Service Name",
      "channelpath": "Service Path",
      "channeltypeinfo": "Service Type Information",
      "channeltypename": "Service Type Name",
      "channeltyperelationname": "Transfer/Association Type",
      "channeltypeuuid": "Service type uuid",
      "channeluuid": "Service uuid",
      "commentlist": "Comment Attachment List",
      "currentprocesstaskstep": "Current step information of the work order",
      "formattributehidelist": "Form Configuration Authorization Hidden Attribute uuid List",
      "formconfigauthoritylist": "Authorization List for Work Order Form Information",
      "groupdesc": "One stop service reporting tracking processing platform",
      "groupname": "ITSM",
      "ishasoldformprop": "Is there any old work order form information",
      "isshowbaseinfo": "Is the basic information expanded by default on the work order details page",
      "isshowprocesstaskstepcommenteditortoolbar": "Show work order step reply rich text editor toolbar",
      "mobileformuitype": "Mobile form interaction type, 1: Exploring pages; 0: Current Page",
      "name": "ITSM",
      "ownercompanylist": "List of companies owned by the work order",
      "ownerdepartmentlist": "List of departments for the work order owner",
      "ownerinfo": "Work order owner information",
      "ownername": "Work order owner name",
      "owneruuid": "Work order owner uuid",
      "processtaskformattributedata": "Work Order Form Attribute Values",
      "processtaskformconfig": "Work Order Form Information",
      "processtaskid": "Work Order ID",
      "processtaskinfo": "Work Order Information",
      "processtaskslalist": "SLA List",
      "processtaskstepid": "Work Order Step ID",
      "processuuid": "Process uuid",
      "redosteplist": "Redo Step List",
      "scoretemplate": "Scoring template",
      "serialnumber": "Work order number",
      "startprocesstaskstep": "Work order start step information",
      "submitterinfo": "Work order submitter information",
      "submittername": "Work order submitter name",
      "submitteruuid": "Work order submitter Uuid",
      "tranferreportdirection": "Transfer/Related Direction",
      "tranferreportprocesstasklist": "Report Work Order Information List",
      "workcenterprocesstasksortindex": "Work Order Center Work Order Sorting Index"
    },
    "knowledge": {
      "groupdesc": "Knowledge platform",
      "groupname": "Knowledge",
      "name": "Knowledge"
    },
    "master": {
      "groupname": "Master",
      "name": "Master"
    },
    "pbc": {
      "groupdesc": "Submission module of financial Information infrastructure management platform"
    },
    "pdb": {
      "name": "PBC"
    },
    "rdm": {
      "appattr": "apply property",
      "appcolor": "Apply Color",
      "applist": "Application List",
      "apptype": "Application Type",
      "auditcount": "Modify Historical Quantity",
      "childrentaskcount": "Number of subtasks",
      "childtaskid": "Subtask ID",
      "commonid": "Comment ID",
      "enddate": "Expected end",
      "groupdesc": "RDM platform",
      "groupname": "RDM",
      "isend": "Is it over",
      "ismytask": "Is it my task",
      "isopen": "Is it enabled",
      "issuecount": "Number of tasks",
      "issueid": "Task ID",
      "iterationid": "Iteration ID",
      "iterationname": "Iteration Name",
      "name": "RDM",
      "parenttaskid": "Parent Task ID",
      "project": {
        "manageridlist": "List of project leader IDs",
        "useridlist": "List of project member user IDs"
      },
      "projectid": "Project ID",
      "projectleader": "Project leader",
      "projectmember": "Project members",
      "projectname": "entry name",
      "projectowner": "Project Owner",
      "projecttype": "Project Type",
      "relapp": "Related applications",
      "relativetasklist": "Associated Task List",
      "reldirection": "Relationship direction",
      "startdate": "Expected start",
      "startenddate": "Starting and ending dates"
    },
    "report": {
      "groupdesc": "Intelligent data analysis platform",
      "groupname": "Report",
      "name": "Report"
    },
    "tagent": {
      "name": "Tagent"
    },
    "tenant": {
      "name": "Tenant"
    }
  }
}
