{
  "common": {
    "account": "Account",
    "action": "Action type",
    "actiontime": "Operation time",
    "actiontype": "Operation type",
    "actionuser": "Operator",
    "activeversionid": "Activation version ID",
    "alertattr": "Alarm Properties",
    "alertdetail": "Alarm details",
    "alertlevel": "Alarm level",
    "alertlink": "Alarm External Link",
    "alertlist": "Alarm List",
    "alerttime": "Alarm time",
    "alertvalue": "Alarm value",
    "all": "All",
    "anchorpoint": "Anchor point",
    "attachment": "attachment",
    "attributelist": "Attribute List",
    "attrname": "Attribute Name",
    "authlist": "Authorization List",
    "avatar": "Avatar",
    "basicauth": "Basic authentication",
    "bearerauth": "Bearer Token",
    "boolean": "Boolean type",
    "branch": "branch",
    "bug": "defect",
    "buildinauth": "Internal verification",
    "cacheandvalid": "Cache but revalidate",
    "catalog": "catalogue",
    "catalogid": "Directory ID",
    "catalogname": "Directory Name",
    "children": "subset",
    "classname": "Full class name",
    "cnname": "Chinese name",
    "collectcount": "Collection volume",
    "collector": "Collector",
    "color": "colour",
    "comment": "comment",
    "commentcount": "Number of comments",
    "common": "public",
    "condition": "Condition configuration",
    "config": "allocation",
    "configfilepath": "Configuration file path",
    "configfilepathlist": "Configuration file path list",
    "configlist": "Configuration List",
    "content": "content",
    "count": "quantity",
    "create": "establish",
    "createdate": "Created on",
    "createrobject": "Creator Object",
    "createtime": "Creation time",
    "createuser": "creator",
    "createusername": "Creator Name",
    "currentpage": "Current Page",
    "customattribute": "Custom Properties",
    "datasource": "Database Data Source",
    "datatype": "data type",
    "date": "date",
    "datetime": "Date Time",
    "defaultvalue": "Default Value List",
    "defaultvaluelist": "List of parameters for echo",
    "delaytime": "delay time ",
    "deletable": "Can I delete it",
    "dependency": "rely on",
    "description": "describe",
    "displaymode": "display mode",
    "displaytype": "Display Type",
    "double": "Double-precision floating-point format",
    "dropdownlist": "Dropdown selection",
    "edit": "modify",
    "editable": "Editable or not",
    "editauthoritylist": "Edit Permission List",
    "editdate": "modification date",
    "editmode": "Editing mode",
    "editor": "Modified by",
    "editorlist": "Modified by List",
    "editorname": "Modifier Name",
    "editorobject": "Modifier Object",
    "edittime": "Modification time",
    "email": "mailbox",
    "emailnotify": "Email notification",
    "embed": "built-in",
    "encoding": "coding",
    "enddate": "End date",
    "endtime": "End time",
    "enum": "enumeration",
    "errorinfo": "error message",
    "errormsg": "Abnormal information",
    "event": "event",
    "example": "example",
    "excludeid": "Exclude ID",
    "excludelist": "Used to filter echo parameters",
    "executable": "Executable or not",
    "executeauthoritylist": "Execution permission list",
    "expired": "overdue",
    "expireddays": "Number of timeout days",
    "failedcount": "Number of errors",
    "failedload": "is failed",
    "favorcount": "Likes",
    "file": "file",
    "fileid": "File ID",
    "filelist": "Attachment List",
    "filename": "file name",
    "fileparamname": "Attachment parameter name",
    "filepath": "File Path",
    "filetype": "Attachment Type",
    "filter": "Filter conditions",
    "focususerlist": "List of followers",
    "focususeruuidlist": "List of followers\u0027 uuids",
    "group": "grouping",
    "grouplist": "Restrict interface return types",
    "hasmore": "Is there any more content that has not been read yet",
    "hasparent": "Do you have a parent",
    "help": "help",
    "homeurl": "Application server address",
    "icon": "icon",
    "id": "id",
    "importtargettype": "Import Target Type",
    "includelist": "Used to require echo parameters",
    "index": "subscript",
    "inittime": "Initialization time",
    "inputfrom": "Update method",
    "inputfromname": "Change method name",
    "int": "int",
    "isactive": "Activate or not",
    "isauthenticate": "Do you need authentication",
    "isdeleted": "Has it been deleted",
    "isend": "Completed or not",
    "isexpired": "Expired or not",
    "isfavoried": "Favorite or not",
    "isfile": "Is it a file",
    "isfocus": "Have you followed",
    "islimit": "Whether to limit the number of items",
    "ismultiple": "Do you want to select multiple options",
    "ismycreated": "Do I create",
    "isneedpage": "Do you need pagination",
    "isneedpriority": "Display priority",
    "isoverride": "Overwrite or not",
    "isregister": "Register or not",
    "isrequired": "Is it mandatory",
    "isreviewable": "Can approval be granted",
    "isshow": "Display or not",
    "isunique": "Is it unique",
    "iteration": "iteration",
    "jobuuid": "Timed homework UUID",
    "jsonarray": "JSON array",
    "jsonobject": "JSON object",
    "key": "key",
    "keyword": "keyword",
    "level": "level",
    "lft": "Left encoding",
    "loglist": "Log List",
    "long": "long integer",
    "mailaddress": "Email address",
    "maintenanceman": "Maintainer",
    "matrix": "matrix",
    "memo": "Remarks",
    "menu": "menu",
    "messagenotify": "Message notification",
    "mobile": "Mobile terminal",
    "module": {
      "group": "Module grouping",
      "groupname": "Module Group Name",
      "name": "Module Name"
    },
    "modulegroup": "Module group",
    "mustinput": "Required",
    "name": "name",
    "needpage": "Whether pagination is required, default to true",
    "needscore": "Do you need to score",
    "newvalue": "New value",
    "noauth": "No certification required",
    "nocache": "No cache",
    "notifytype": "Notification Type",
    "number": "number",
    "object": "Any object",
    "oldvalue": "Old value",
    "ownereditable": "Can the maintainer be edited",
    "owneruuid": "Maintainer",
    "packagename": "Package Name",
    "pagecount": "page count",
    "pageinfo": "Paging data",
    "pagesize": "page size",
    "parentid": "Parent ID",
    "password": "password",
    "path": "path",
    "pc": "Computer side",
    "phone": "Telephone number",
    "planstarttime": "Planned time",
    "prefix": "prefix",
    "primarykey": "Primary key",
    "priority": "priority",
    "prioritycolor": "Priority Color",
    "priorityname": "Priority Name",
    "priorityuuid": "Priority uuid",
    "privatecache": "Private cache",
    "progress": "schedule",
    "publiccache": "Public cache",
    "rangelist": "Limit the scope of interface options",
    "referencecount": "Number of references",
    "regex": "regular expression ",
    "relname": "Relationship Name",
    "reltype": "Relationship Type",
    "request": "demand",
    "reviewable": "Is it auditable",
    "reviewer": "Reviewed by",
    "reviewerlist": "List of approvers",
    "rht": "Right encoding",
    "role": "role",
    "roleuuid": "Role uuid",
    "roleuuidlist": "Role uuid List",
    "rownum": "Data Entry",
    "savemode": "Save Mode",
    "schedule": "Scheduled Tasks",
    "schedulejobclassinfo": "Timed Job Component Information",
    "schedulejobinfo": "Scheduled job information",
    "scoreinfo": "Rating information",
    "serviceid": "Service ID",
    "servicename": "service name",
    "sort": "sort",
    "source": "source",
    "sourcelist": "Source List",
    "sourcename": "Source Chinese Name",
    "specifyversionid": "Specify version ID",
    "startdate": "Start date",
    "startloadcommercialmodule": "Success to loaded commercial module {0}",
    "startloadconfig": "Start to load config from {0}...",
    "startloadmodule": "Start to initialize module...",
    "startloadschedulejob": "Start to load schedule job of {0}...",
    "startloadstartupjob": "Start to run startup job {0} for {1} ...",
    "starttime": "start time",
    "startupjob": "Startup Job",
    "status": "state",
    "statuscolor": "Status Color",
    "statusinfo": "status information ",
    "statuslist": "Status List",
    "statusname": "Status Name",
    "statusuniquename": "State Unique Identification",
    "string": "character string",
    "successload": "is loaded",
    "superadmin": "Super administrator",
    "tablelist": "Table List",
    "tag": "label",
    "tagid": "Tag ID",
    "tagidlist": "Tag ID List",
    "taglist": "Label List",
    "task": "task",
    "tbodylist": "tbody list",
    "team": "group",
    "teamuuid": "User group uuid",
    "teamuuidlist": "User group uuid list",
    "tel": "Mobile phone number",
    "templateid": "Template ID",
    "templatename": "Template Name",
    "tenantname": "Tenant Name",
    "tenantuuid": "Tenant uuid",
    "testcase": "test case",
    "testenv": "testing environment",
    "testplan": "test plan",
    "text": "text",
    "textbox": "Text Box",
    "theadlist": "thead list",
    "time": "time",
    "timecost": "time consuming",
    "timeoutpoint": "Time out point",
    "title": "title",
    "toomanyoption": "Too many options, other options will not be displayed",
    "trigger": "Trigger point",
    "triggertime": "Trigger time",
    "triggertype": "Trigger type",
    "type": "type",
    "typeid": "Type ID",
    "typename": "Type Name",
    "typeuuid": "type uuid",
    "unique": "only",
    "uniquename": "Unique identification",
    "upwardnamelist": "Upper level name list",
    "user": "user",
    "userenname": "User English Name",
    "userid": "User ID",
    "useridlist": "User ID List",
    "userinfolist": "User Information List",
    "userlist": "User List",
    "username": "user name",
    "userselectionimportoption": "User selected dependent data for import",
    "usertype": "customer type",
    "useruuid": "User uuid",
    "useruuidlist": "User uuid list",
    "uuid": "Uuid",
    "validcode": "Registration verification code",
    "validtype": "Verification method",
    "value": "value",
    "versioncount": "Number of versions",
    "versionid": "Version ID",
    "versionlist": "List of versions",
    "versionname": "Version name",
    "versionnum": "Version number",
    "viewable": "Can I view it",
    "viewauthoritylist": "View permission list",
    "viewcount": "View volume",
    "wechatnotify": "WeChat notification",
    "widgetlist": "Component List",
    "worker": "Processed by",
    "worktimename": "Working Time Window Name",
    "worktimeuuid": "Working Time Window Uuid"
  },
  "nfac": {
    "autoexectenantconfig": {
      "autoexecjoblogencoding": "Automation job log Character encoding set",
      "maxnumofcombopversion": "The maximum number of versions of the combination tool, such as setting a maximum of 10 versions, will automatically delete the oldest and inactive version when creating and saving the 11th version."
    }
  },
  "nfae": {
    "autoexeccatalognotfoundexception": {
      "autoexeccatalognotfoundexception": "Tool directory: {0} does not exist"
    },
    "autoexeccombopoperationnotfoundexception": {
      "autoexeccombopoperationnotfoundexception": "The stage [{0}] tool [{1}] has been deleted. Please clean up the tool in the combination tool and save it"
    },
    "autoexecjobnotsupportmultiparentexception": {
      "autoexecjobnotsupportmultiparentexception": "Parent job {0} already exists, and currently does not support multi-level parent jobs"
    },
    "autoexecparamcannotbeemptyexception": {
      "autoexecparamcannotbeemptyexception": "Parameter of stage [{0}] tool [{1}]: {2} cannot be empty"
    },
    "autoexecparammappingargumentcountmismatchexception": {
      "autoexecparammappingargumentcountmismatchexception": "The free parameter of stage [{0}] tool [{1}]: {2} does not match the number of mappings, set the number to {3}"
    },
    "autoexecparammappingincorrectexception": {
      "autoexecparammappingincorrectexception": "Parameter of stage [{0}] tool [{1}]: {2} mapping incorrect"
    },
    "autoexecparammappingnotmappedexception": {
      "autoexecparammappingnotmappedexception": "New mandatory parameter for stage [{0}] tool [{1}]: {2} has no default value"
    },
    "autoexecparammappingtargetnotfoundexception": {
      "autoexecparammappingtargetnotfoundexception_a": "Parameter of stage [{0}] tool [{1}]: {2} mapping target {3} does not exist",
      "autoexecparammappingtargetnotfoundexception_b": "The execution user mapping job parameter {1} for stage [{0}] does not exist",
      "autoexecparammappingtargetnotfoundexception_c": "The execution user mapping job parameter {1} for stage group [{0}] does not exist",
      "autoexecparammappingtargetnotfoundexception_d": "The execution user mapping job parameter {0} for the execution target does not exist"
    },
    "autoexecparammappingtargettypemismatchexception": {
      "autoexecparammappingtargettypemismatchexception": "Parameter of stage [{0}] tool [{1}]: {2} mapping target {3} type mismatch"
    },
    "autoexecparamnotfoundexception": {
      "autoexecparamnotfoundexception": "Parameter of stage [{0}] tool [{1}]: {2} does not exist"
    },
    "autoexecparamvalueirregularexception": {
      "autoexecparamvalueirregularexception_a": "The parameter of stage [{0}] tool [{1}]: {2} ({3}) value: {4} does not meet the format requirements",
      "autoexecparamvalueirregularexception_b": "Parameter of {0}: Value of {1} ({2}): {3} does not meet the format requirements",
      "autoexecparamvalueirregularexception_c": "The value {2} of parameter {0} ({1}) does not meet the formatting requirements"
    },
    "autoexecprofileisnotfoundexception": {
      "autoexecprofileisnotfoundexception": "The preset parameter set {0} does not exist"
    }
  },
  "nfaec": {
    "autoexeccombopnotfoundedittargetexception": {
      "autoexeccombopnotfoundedittargetexception": "Combination tool: {0} does not exist"
    },
    "autoexeccombopversionnotfoundedittargetexception": {
      "autoexeccombopversionnotfoundedittargetexception": "Combination tool version: {0} does not exist"
    }
  },
  "nfaej": {
    "autoexecjobnotfoundedittargetexception": {
      "autoexecjobnotfoundedittargetexception": "Assignment: {0} does not exist"
    }
  },
  "nfaes": {
    "autoexecschedulenotfoundedittargetexception": {
      "autoexecschedulenotfoundedittargetexception": "Timed assignment: {0} does not exist"
    },
    "autoexecscriptnotfoundedittargetexception": {
      "autoexecscriptnotfoundedittargetexception": "Custom tool: {0} does not exist"
    },
    "autoexecscriptversionnotfoundedittargetexception": {
      "autoexecscriptversionnotfoundedittargetexception": "Version: {0} does not exist"
    }
  },
  "nfaet": {
    "autoexectoolnotfoundedittargetexception": {
      "autoexectoolnotfoundedittargetexception": "Tool: {0} does not exist"
    }
  },
  "nfal": {
    "matrix_modify": {
      "getauthdisplayname": "Matrix Management Permissions",
      "getauthintroduction": "Adding, modifying, and deleting matrices"
    },
    "notify_config_modify": {
      "getauthdisplayname": "Notification Configuration Management Permissions",
      "getauthintroduction": "Modify notification configuration"
    }
  },
  "nfb": {
    "moduleinitializer": {
      "checkchangelog": {
        "invalid": "Version log: {0}, folder name under changelog needs to be named in {1} format"
      },
      "getactivetenantlist": {
        "neatlogicdb": "Unable to connect to the nextlogic library. Check if the database account and password configuration for nacos | config.properties are correct and restart"
      },
      "initdmlsql": {
        "tenant": "Start to Initialize Database..."
      }
    }
  },
  "nfc": {
    "frameworktenantconfig": {
      "apiqps": "Peak number of requests sent to the server per second (regardless of interface)"
    }
  },
  "nfcdc": {
    "globalattrentityvo": {
      "entityfield": {
        "valuelist": "Attribute value"
      }
    }
  },
  "nfce": {
    "changetemplatenotfoundedittargetexception": {
      "changetemplatenotfoundedittargetexception": "Change template: {0} does not exist"
    }
  },
  "nfceg": {
    "globalattrisinusedexception": {
      "globalattrisinusedexception": "The current attribute is in use and cannot be deleted"
    }
  },
  "nfcer": {
    "appenvnotfoundedittargetexception": {
      "appenvnotfoundedittargetexception": "Environment: {0} does not exist"
    },
    "appmodulenotfoundedittargetexception": {
      "appmodulenotfoundedittargetexception": "Application module: {0} does not exist"
    },
    "appsystemnotfoundedittargetexception": {
      "appsystemnotfoundedittargetexception": "Application: {0} does not exist"
    },
    "resourcecenterviewconfigexception": {
      "resourcecenterviewconfigexception": "Field declared in view {0}: {1}, but definition not found in configuration file"
    },
    "resourcenotfoundexception": {
      "resourcenotfoundexception": {
        "id": "Resource {0} does not exist",
        "ip": "Find out if the resource does not exist through ip: {0}, port: {1}, nodeName: {2}, nodeType: {3}"
      }
    },
    "resourceviewfieldmappingexception": {
      "resourceviewfieldmappingexception_a": "The main model in resource view {0} is not set",
      "resourceviewfieldmappingexception_b": "Field list {1} in resource view {0} has no mapping set",
      "resourceviewfieldmappingexception_c": "The main model {1} in resource view {0} does not exist",
      "resourceviewfieldmappingexception_d": "The mapping {2} value of field {1} in resource view {0} is {3}, which is not set correctly"
    }
  },
  "nfd": {
    "licensevo": {
      "entityfield": {
        "name": {
          "dburl": "Database URL",
          "enddate": "Service Termination Date",
          "expirationdate": "expiration date ",
          "graceperiod": "Grace days",
          "isend": "Whether to terminate the service",
          "isvalid": "Is it legal",
          "modules": "Module List",
          "purchaser": "Customer Name"
        }
      }
    }
  },
  "nfda": {
    "app_config_modify": {
      "getauthdisplayname": "Application Configuration Maintenance Permissions",
      "getauthintroduction": "View application configuration, add applications, modify application configurations with data permission and edit configuration permission"
    },
    "deploy_modify": {
      "getauthdisplayname": "Auto Release management Permissions",
      "getauthintroduction": "Automatically publish global parameter management and scenario definition"
    }
  },
  "nfdal": {
    "dr_base": {
      "getauthdisplayname": "Basic permissions for disaster recovery switching"
    }
  },
  "nfdc": {
    "deploytenantconfig": {
      "gitlabwebhookcallbackhost": "Gitlab webhook callback host address"
    }
  },
  "nfdd": {
    "datasourcedatavo": {
      "entityfield": {
        "name": {
          "conditionlist": "Condition List",
          "datasourceid": "Data source ID",
          "expiremin": "Effective time in minutes",
          "inserttime": "Add Date"
        }
      },
      "inserttime": "InsertTime"
    },
    "datasourcevo": {
      "entityfield": {
        "name": {
          "connectionid": "Data connection ID",
          "cron": "Timing strategy",
          "datacount": "Data volume",
          "dbtype": "Database type",
          "expireunit": "Effective time unit",
          "fieldlist": "Field List",
          "fileid": "Profile ID",
          "mode": "Synchronous mode",
          "moduleid": "Module",
          "modulename": "Module Name",
          "paramlist": "parameter list",
          "querytimeout": "Query timeout, in seconds",
          "xml": "XML configuration"
        }
      }
    },
    "drcilvo": {
      "entityfield": {
        "cilist": {
          "name": "Associated Model List"
        }
      }
    },
    "drcivo": {
      "entityfield": {
        "ciidlist": {
          "name": "List of associated model IDs"
        }
      }
    },
    "drdatacentervo": {
      "entityfield": {
        "name": {
          "name": "Data Center Name"
        },
        "referencecount": {
          "name": "Number of associated scenes"
        }
      }
    },
    "drorganizationuservo": {
      "entityfield": {
        "orglist": {
          "name": "User Organization List"
        },
        "orgname": {
          "name": "Organization Name"
        },
        "orgnamelist": {
          "name": "List of organization names to which the user belongs"
        }
      }
    },
    "drorganizationvo": {
      "entityfield": {
        "childcount": {
          "name": "Number of sub levels"
        },
        "children": {
          "name": "Sublevel List"
        },
        "usercount": {
          "name": "Number of associated users"
        }
      },
      "rootname": "Commander in Chief"
    },
    "drscenevo": {
      "entityfield": {
        "name": {
          "name": "Scene Name"
        },
        "referencecount": {
          "name": "Number of associated services"
        },
        "sourceid": {
          "name": "Migration source data center ID"
        },
        "sourcename": {
          "name": "Migration Source Data Center"
        },
        "targetid": {
          "name": "Migration destination data center ID"
        },
        "targetname": {
          "name": "Migration destination data center"
        }
      }
    }
  },
  "nfddv": {
    "deployversionissuevo": {
      "browseurl": {
        "name": "Browse URL"
      },
      "handleuserid": {
        "name": "Issue handler"
      },
      "issuecreatetime": {
        "name": "Issue creation time"
      },
      "issuecreator": {
        "name": "Issue Creator"
      },
      "issuedescription": {
        "name": "Issue Description"
      },
      "issueid": {
        "name": "Requirement ID"
      },
      "issuelastsynctime": {
        "name": "Issue Last synchronization time"
      },
      "issuename": {
        "name": "Issue Name"
      },
      "issuepersonincharge": {
        "name": "Issue Leader"
      },
      "issuestatus": {
        "name": "Issue Status"
      },
      "issuetype": {
        "name": "Issue Type"
      },
      "issueupdatetime": {
        "name": "Issue update time"
      },
      "isvalid": {
        "name": "Is it a valid requirement? True: valid, false: invalid"
      },
      "lcd": {
        "name": "Last modification time"
      },
      "lcu": {
        "name": "Finally, modify the user"
      },
      "no": {
        "name": "Issue number"
      },
      "sortcloumn": {
        "name": "Column sorting function such as issue.lcd DESC"
      },
      "source": {
        "name": "Sync Source"
      },
      "sourceid": {
        "name": "Sync Source ID"
      },
      "syncuser": {
        "name": "Issue Synchronize Users"
      }
    },
    "deployversionissuevoissueupdateuser": {
      "name": "Issue updated by"
    }
  },
  "nfde": {
    "documentonlinenotfoundexception": {
      "documentonlinenotfoundexception": "Online help document: {0} does not exist"
    },
    "drapptypenotfoundexception": {
      "drapptypenotfoundexception": "Application type: {0} does not exist"
    },
    "drdatacenterisinusedexception": {
      "drdatacenterisinusedexception": "The data center is currently in use"
    },
    "drdatacenternameisexistsexception": {
      "drdatacenternameisexistsexception": "The data center name: {0} already exists"
    },
    "drdatacenternotfoundexception": {
      "drdatacenternotfoundexception": "The data center: {0} does not exist"
    },
    "drorganizationdeleterootnotallowedexception": {
      "drorganizationdeleterootnotallowedexception": "Deleting organizational structure root node is not allowed"
    },
    "drorganizationhasbeenreferredexception": {
      "drorganizationhasbeenreferredexception": "Organizational structure: {0} or its sub levels still have users and cannot be deleted"
    },
    "drorganizationnotfoundexception": {
      "drorganizationnotfoundexception": "Organizational structure: {0} does not exist"
    },
    "drorganizationrepeatexception": {
      "drorganizationrepeatexception": "Organizational structure: {0} already exists"
    },
    "drsceneillegalargumentexception": {
      "drsceneillegalargumentexception": "Illegal scene parameters"
    },
    "drscenenameisexistsexception": {
      "drscenenameisexistsexception": "Scene name: {0} already exists"
    },
    "drscenenotfoundexception": {
      "drscenenotfoundexception": "Scene: {0} does not exist"
    },
    "drscenesamedatacenterexception": {
      "drscenesamedatacenterexception": "The data center cannot be the same before and after migration"
    },
    "drservicedatacenteratleasttwoexception": {
      "drservicedatacenteratleasttwoexception": "A service needs to be associated with at least 2 data centers"
    },
    "drservicedatacenterrepeatexception": {
      "drservicedatacenterrepeatexception": "Services cannot be associated with the same data center repeatedly"
    },
    "drservicedependencyrelationshipalreadyloopedexception": {
      "drservicedependencyrelationshipalreadyloopedexception": "The service dependency relationship has become a loop: {0}"
    },
    "drservicedependencyrelationshiprepeatexception": {
      "drservicedependencyrelationshiprepeatexception": "Services cannot rely on the same service repeatedly"
    },
    "drservicenameisexistsexception": {
      "drservicenameisexistsexception": "Service name: {0} already exists"
    },
    "drservicenotfoundedittargetexception": {
      "drservicenotfoundedittargetexception": "Disaster recovery service: {0} does not exist"
    },
    "drservicesceneatleastoneexception": {
      "drservicesceneatleastoneexception": "A service requires at least one scenario"
    },
    "drservicescenerepeatexception": {
      "drservicescenerepeatexception": "Services cannot be repeatedly associated with the same scenario"
    }
  },
  "nfdej": {
    "deploybatchjobnotfoundedittargetexception": {
      "deploybatchjobnotfoundedittargetexception": "Batch publish job: {0} does not exist"
    }
  },
  "nfdep": {
    "deploypipelinenotfoundedittargetexception": {
      "deploypipelinenotfoundedittargetexception": "The pipeline with id {0} does not exist"
    },
    "importdeploypipelineappnameinconsistencyexception": {
      "importdeploypipelineappnameinconsistencyexception": "Import failed. The application name in the import package is inconsistent with the current application name. Importing the pipeline configuration of {0} application into {1} application is not supported"
    }
  },
  "nfdev": {
    "deployversionnotfoundedittargetexception": {
      "deployversionnotfoundedittargetexception": "Release version: {0} does not exist"
    }
  },
  "nfe": {
    "confignotfoundexception": {
      "confignotfoundexception": "NACOS cannot obtain the configuration and the local config.properties acquisition failed. Please confirm if the NACOS service is functioning properly or if the config.properties file exists, and if so, if the file permissions are normal"
    }
  },
  "nfec": {
    "changelogversioninvalidexception": {
      "changelogversioninvalidexception": {
        "a": "Module: {0} Version: {1} File content format is illegal"
      }
    },
    "changelogversionnotfoundexception": {
      "changelogversionnotfoundexception": {
        "a": "Module: {0} Version: {1} does not exist"
      }
    }
  },
  "nfeec": {
    "eventsolutionnotfoundedittargetexception": {
      "eventsolutionnotfoundedittargetexception": "Solution: {0} does not exist"
    }
  },
  "nfer": {
    "runnernotfoundbytagentrunneridexception": {
      "runnernotfoundbytagentrunneridexception": "Could not find the corresponding runner for {0}. Please check logs/tagentRegisterAndNetty.log for abnormal heartbeat"
    }
  },
  "nfes": {
    "dmlsqlexecuteexception": {
      "dmlsqlexecuteexception": "Tenant:{0} Module:{1} dmlSql:{2} execution failed"
    }
  },
  "nfet": {
    "paramirregularexception": {
      "paramirregularexception": {
        "common": "The parameter \u0027{0}\u0027 does not meet the format requirements",
        "rule": "The parameter \u0027{0}\u0027 does not meet the format requirements, {1}"
      }
    },
    "paramjsonirregularexception": {
      "paramjsonirregularexception": "The parameter is not in a valid JSON format"
    },
    "tenantconfignotfoundexception": {
      "tenantconfignotfoundexception": "Configuration information: {0} does not exist"
    }
  },
  "nfew": {
    "wechatauthenticationinformationnotfoundexception": {
      "wechatauthenticationinformationnotfoundexception": "Enterprise WeChat authentication information not found"
    }
  },
  "nfie": {
    "exportnoauthexception": {
      "exportnoauthexception": "No export permission"
    },
    "importexporthandlernotfoundexception": {
      "importexporthandlernotfoundexception": "Import export processor: {0} cannot be found"
    },
    "importexporttypeinconsistencyexception": {
      "importexporttypeinconsistencyexception": "The import type is inconsistent with the target type, and data of type {0} cannot be imported into type {1}"
    },
    "importnoauthexception": {
      "importnoauthexception": "No import permission"
    },
    "inspectdefinitionnotfoundedittargetexception": {
      "inspectdefinitionnotfoundedittargetexception": "Inspection definition: {0} does not exist"
    },
    "inspectnewproblemcustomviewnotfoundedittargetexception": {
      "inspectnewproblemcustomviewnotfoundedittargetexception": "The latest issue in the inspection is that the personal view classification {0} does not exist"
    }
  },
  "nfke": {
    "knowledgecirclenotfoundedittargetexception": {
      "knowledgecirclenotfoundedittargetexception": "Knowledge Circle: {0} does not exist"
    },
    "knowledgedocumentdraftreviewedexception": {
      "knowledgedocumentdraftreviewedexception": "The draft has been approved and does not require repeated approval"
    },
    "knowledgedocumentnotfoundedittargetexception": {
      "knowledgedocumentnotfoundedittargetexception": "Knowledge base document: {0} does not exist"
    },
    "knowledgedocumentversionnotfoundedittargetexception": {
      "knowledgedocumentversionnotfoundedittargetexception": "Knowledge base document version: {0} does not exist"
    },
    "knowledgetemplatenotfoundedittargetexception": {
      "knowledgetemplatenotfoundedittargetexception": "Knowledge template: {0} does not exist"
    }
  },
  "nfne": {
    "emailsendexception": {
      "emailsendexception": "Email sending failed, please try again"
    }
  },
  "nfpc": {
    "itsmtenantconfig": {
      "displaymodeaftertimeout": "Display method after work order timeout, optional values naturalTime | workTime",
      "processtaskstepenablecomment": "Work order step reply function"
    },
    "processtaskgroupsearch": {
      "processusertype": "Work order stakeholders"
    }
  },
  "nfpec": {
    "catalognotfoundedittargetexception": {
      "catalognotfoundedittargetexception": "Service directory: {0} does not exist"
    },
    "channelnotfoundedittargetexception": {
      "channelnotfoundedittargetexception": "Service: {0} does not exist"
    }
  },
  "nfpep": {
    "processnotfoundedittargetexception": {
      "processnotfoundedittargetexception": "Process: {0} does not exist"
    },
    "processtasknotfoundedittargetexception": {
      "processtasknotfoundedittargetexception": "Work order: {0} does not exist"
    }
  },
  "nfral": {
    "priority_manage": {
      "getauthdisplayname": "Priority management permissions",
      "getauthintroduction": "Adding, editing, and deleting priorities"
    },
    "project_manage": {
      "getauthdisplayname": "Project management permissions",
      "getauthintroduction": "Reopen Project"
    },
    "template_manage": {
      "getauthdisplayname": "Project Template Management Permissions",
      "getauthintroduction": "Editing and deleting project templates allows you to save existing projects as templates."
    }
  },
  "nfrd": {
    "appattrvo": {
      "entityfield": {
        "expressionlist": "List of supported search expressions"
      }
    },
    "appstatusvo": {
      "entityfield": {
        "name": {
          "isstart": "Start or not"
        }
      }
    },
    "appvo": {
      "entityfield": {
        "name": {
          "hasissue": "Does it include tasks",
          "hasiteration": "Is it associated with iteration"
        }
      }
    },
    "issuevo": {
      "entityfield": {
        "name": "apply name"
      }
    },
    "issuewebhookvo": {
      "entityfield": {
        "name": "Data ID"
      }
    },
    "projecttemplateapptypevo": {
      "entityfield": {
        "name": {
          "apptypename": "Application Type Name"
        }
      }
    },
    "projecttemplatevo": {
      "entityfield": {
        "name": {
          "apptypelist": "Application Type List"
        }
      }
    },
    "projectuservo": {
      "entityfield": {
        "name": "User Type List"
      }
    },
    "projectvo": {
      "entityfield": {
        "name": {
          "isleader": "Is the current user a project administrator",
          "ismember": "Is the current user a project member",
          "isowner": "Is the current user the project owner"
        }
      }
    },
    "webhookdatavo": {
      "entityfield": {
        "name": "mail"
      }
    }
  },
  "nfre": {
    "apptype": {
      "getenumname": "Project Object Type"
    },
    "apptypeisemptyexception": {
      "apptypeisemptyexception": "At least one application needs to be included in the project template"
    },
    "dashboardnotfoundexception": {
      "dashboardnotfoundexception": "Dashboard {0} does not exist"
    },
    "issuecostnotauthdeleteexception": {
      "issuecostnotauthdeleteexception": "You do not have permission to delete project expenses"
    },
    "issuecostnotauthsaveexception": {
      "issuecostnotauthsaveexception": "You do not have permission to save the current project expenses"
    },
    "issuecostnotauthsearchexception": {
      "issuecostnotauthsearchexception": "You do not have permission to search for current project expenses"
    },
    "issuegroupsearch": {
      "projectusertype": "Project stakeholders"
    },
    "issuenotauthsearchexception": {
      "issuenotauthsearchexception": "You do not have permission to search for current project tasks"
    },
    "issuenotdeleteauthexception": {
      "issuenotdeleteauthexception": "You do not have permission to delete the current task"
    },
    "priorityisinusedexception": {
      "priorityisinusedexception": "Priority {0} is currently in use"
    },
    "prioritynameisexistsexception": {
      "prioritynameisexistsexception": "Priority {0} already exists"
    },
    "projectnotauthcloseexception": {
      "projectnotauthcloseexception": "You do not have permission to close project {0}"
    },
    "projectnotauthdashboardexception": {
      "projectnotauthdashboardexception": "You are not a member of the current project and do not have permission to operate dashboards"
    },
    "projectnotauthdeleteexception": {
      "projectnotauthdeleteexception": "You do not have permission to delete project {0}"
    },
    "projectnotauthexception": {
      "projectnotauthexception": "You do not have permission to modify project \u0027{0}\u0027"
    },
    "projectnotauthissueexception": {
      "projectnotauthissueexception": "You are not a member of the current project and do not have permission to create tasks"
    },
    "projectnotfoundexception": {
      "projectnotfoundexception": "Project \u0027{0}\u0027 does not exist",
      "theprojectnotfoundexception": "Project does not exist"
    },
    "projectusertype": {
      "getenumname": "Project User Type"
    },
    "reportinstancenotfoundedittargetexception": {
      "reportinstancenotfoundedittargetexception": "Report instance: {0} does not exist"
    },
    "reportnotfoundedittargetexception": {
      "reportnotfoundedittargetexception": "Report: {0} does not exist"
    },
    "reportsendjobnotfoundedittargetexception": {
      "reportsendjobnotfoundedittargetexception": "Report sending plan: {0} does not exist"
    },
    "reportstatementnotfoundedittargetexception": {
      "reportstatementnotfoundedittargetexception": "Large screen report: {0} does not exist"
    },
    "systemattrtype": "System Properties"
  },
  "nfs": {
    "scriptrunnermanager": {
      "runscriptoncewithjdbc": {
        "failed": "Execution failed, please check and verify the latest database table schema",
        "tenantnotconnect": "Unable to connect to tenant library netlogic_ {0}, please go to the datasource table in the nearlogic library to confirm if the username, password, host, and port fields of the {0} tenant are correct."
      }
    }
  },
  "nmaac": {
    "autoexeccatalogsaveapi": {
      "getname": "Save Tool Catalog"
    },
    "autoexeccombopbasicinfogetapi": {
      "getname": "Basic information of query combination tool"
    },
    "autoexeccombopbasicinfosaveapi": {
      "getname": "Save basic information of the combination tool"
    },
    "autoexeccombopdetailgetapi": {
      "getname": "Obtain detailed information on combination tools and activation versions"
    },
    "autoexeccombopexecutablelistapi": {
      "getname": "Query the list of combination tools that the current user can execute"
    },
    "autoexeccombopisactiveupdateapi": {
      "getname": "Enable/disable combination tool"
    },
    "autoexeccombopversiongetapi": {
      "getname": "Query the version details of the combination tool"
    },
    "autoexeccombopversionsaveapi": {
      "getname": "Save the version information of the combination tool"
    },
    "listautoexeccomboptypeexecutableapi": {
      "getname": "Query the classification list of the combination tools that the current user can execute"
    },
    "savecustomtemplateapi": {
      "getname": "Save Custom Template"
    }
  },
  "nmaaj": {
    "autoexecjobinfogetapi": {
      "getname": "Obtain automation job details"
    },
    "getautoexecjobstatusapi": {
      "description": {
        "desc": "Get Job Status"
      },
      "input": {
        "param": {
          "desc": {
            "idlist": "Job idList"
          }
        }
      }
    },
    "listautoexecjoblogencodingapi": {
      "getname": "Get automatic job log Character encoding set",
      "mydoservice": {
        "error": "Autoexec. job. log. encoding format is not JsonArray"
      }
    }
  },
  "nmaaja": {
    "createautoexecjobfromcombopapi": {
      "getname": "Job creation (from combination tool)",
      "input": {
        "param": {
          "desc": {
            "invokeid": "Source ID",
            "name": "Job Name",
            "parentid": "Parent Job ID",
            "roundcount": "Number of groups",
            "scenarioname": "The scene name, if the input parameter also has a scenarioId, the scenarioName will prevail",
            "source": "Source: itsm | combo ITSM | initiated by combination tools, etc",
            "triggertype": "Trigger method",
            "versionid": "Combination tool version ID"
          }
        }
      }
    },
    "createautoexecjobfromcomboppublicapi": {
      "description": {
        "desc": "Create a job for external calls (from the combination tool)"
      },
      "getname": "Create a job for external calls",
      "input": {
        "param": {
          "assign": "Specify the execution user ID. If not specified, it defaults to the current authenticated user",
          "combop": "Combination tool name"
        }
      }
    },
    "downloadautoexecjoboutputfilebatchapi": {
      "getname": "Batch download of job output files"
    }
  },
  "nmaaje": {
    "updateautoexecjobphasestatusapi": {
      "getname": "Callback Update Job Stage Status"
    },
    "updateautoexecjobstatusapi": {
      "getname": "Callback update job status"
    }
  },
  "nmaar": {
    "autoexecrisksaveapi": {
      "getname": "Save Operation Level"
    }
  },
  "nmaas": {
    "autoexecschedulegetapi": {
      "getname": "Obtain scheduled job information"
    },
    "autoexecscriptgetapi": {
      "getname": "View Script"
    },
    "autoexecscriptreviewapi": {
      "getname": "Audit script",
      "input": {
        "param": {
          "desc": "Pass, reject"
        }
      }
    },
    "autoexecscriptsaveapi": {
      "getname": "Save Script"
    }
  },
  "nmaat": {
    "autoexectoolgetapi": {
      "getname": "Get Tools"
    },
    "batchdeleteautoexectoolapi": {
      "getname": "Batch delete built-in tools, delete tools whose importTime does not equal the passed in parameter values"
    },
    "registerautoexectoolapi": {
      "getname": "Register built-in tools",
      "getparamlist": {
        "array": "Array type required"
      }
    },
    "saveautoexectypeapi": {
      "getname": "Save Automation Tool Classification"
    }
  },
  "nmcaa": {
    "deleteattrapi": {
      "getname": "Delete Model Properties"
    },
    "getattrapi": {
      "getname": "Get attribute details",
      "input": {
        "param": {
          "desc": {
            "id": "Attribute ID"
          }
        }
      }
    },
    "getattrlistapi": {
      "input": {
        "param": {
          "desc": {
            "idlist": "Attribute ID List"
          }
        }
      }
    },
    "getciattrlistapi": {
      "getname": "Obtain a list of model properties"
    },
    "listattrtypeapi": {
      "getname": "Get Property Type"
    },
    "saveattrapi": {
      "getname": "Save Model Properties",
      "input": {
        "param": {
          "desc": {
            "inputtype": "Input type, manual input | automatic discovery"
          }
        }
      }
    },
    "searchattrapi": {
      "getname": "Query Properties"
    }
  },
  "nmcab": {
    "deletebatchimportfileapi": {
      "getname": "Delete bulk import files"
    },
    "firebatchimportapi": {
      "getname": "Initiate bulk import",
      "input": {
        "param": {
          "desc": {
            "action": "Append: only add; Update: only update; All: Add\u0026Update"
          }
        }
      }
    },
    "getbatchimportauditapi": {
      "getname": "Obtain individual configuration item import logs"
    },
    "getbatchimportfilelistapi": {
      "getname": "Obtain batch import files"
    },
    "getimporttemplateapi": {
      "getname": "Download Configuration Item Import Template"
    },
    "searchbatchimportauditapi": {
      "getname": "Query batch import logs"
    },
    "stopbatchimportapi": {
      "getname": "Stop bulk import"
    },
    "uploadbatchimportfileapi": {
      "getname": "Upload batch import files"
    }
  },
  "nmcac": {
    "batchdeletecientityapi": {
      "getname": "Batch Delete Configuration Items",
      "input": {
        "param": {
          "desc": {
            "cientitylist": "Delete the list, including three attributes: ciId, ciEntityId, and ciEntityName",
            "needcommit": "Do you need to submit"
          }
        }
      }
    },
    "batchsavecientityapi": {
      "getname": "Save Configuration Item",
      "input": {
        "param": {
          "desc": {
            "issimple": "Is the data in a simple mode"
          },
          "help": {
            "issimple": "Simple mode is mainly used by third-party systems, true: Simple mode, false: Normal mode"
          }
        }
      }
    },
    "batchsavecientitysimpleapi": {
      "getname": "Batch Save Configuration Items (Simplified Version)"
    },
    "batchupdatecientityapi": {
      "getname": "Batch Modify Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrentitydata": "Properties that need to be modified",
            "cientityidlist": "Modified configuration item ID",
            "relentitydata": "Relationships that need to be modified"
          }
        }
      }
    },
    "deletealertlevelapi": {
      "getname": "Delete alarm level"
    },
    "deleteciapi": {
      "getname": "Delete Model"
    },
    "deletecientityapi": {
      "getname": "Delete Configuration Item"
    },
    "exportciapi": {
      "getname": "Export Configuration Item Model"
    },
    "exportcientityapi": {
      "getname": "Export Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrfilterlist": "Attribute filtering criteria",
            "idlist": "ID List",
            "relfilterlist": "Relationship filtering criteria",
            "showattrrellist": "List of fields to be exported, including attributes and relationships"
          }
        }
      }
    },
    "exportciforexcelapi": {
      "getname": "Export configuration item model and Property list"
    },
    "exportillegalcientityapi": {
      "getname": "Export non compliant configuration items"
    },
    "getalertlevelapi": {
      "getname": "Obtain alarm level"
    },
    "getciapi": {
      "getname": "Obtain model information",
      "input": {
        "param": {
          "desc": {
            "needaction": "Do you need to operate? If necessary, permission verification will be performed"
          }
        }
      }
    },
    "getciattrrellistapi": {
      "description": {
        "desc": "Obtain model information interface, which is mainly used for linking with ITSM forms"
      }
    },
    "getciauthapi": {
      "getname": "Obtain model authorization information"
    },
    "getcientityapi": {
      "getname": "Obtain configuration item details",
      "input": {
        "param": {
          "desc": {
            "limitattrentity": "Whether to limit the number of referenced attributes, default value is: true",
            "limitrelentity": "Whether to limit the number of relationships, default value is: true",
            "needaction": "Do you need an action column? If you need to check the operation permissions, the action column will be returned based on the results",
            "showattrrellist": "List of fields to be displayed, including attribute relationships and constants, format: attr_ Xxx, relfrom_ Xxx or relto_ Xxx, xxx is the corresponding ID"
          }
        }
      }
    },
    "getcientityauthapi": {
      "getname": "Obtain configuration item permission information",
      "input": {
        "param": {
          "desc": {
            "authlist": "List of permissions that need to be determined"
          }
        }
      }
    },
    "getcientitybaseinfolistapi": {
      "description": {
        "desc": "Obtain basic information of multiple configuration items based on the ID list"
      },
      "getname": "Obtain basic information for multiple configuration items",
      "input": {
        "param": {
          "desc": {
            "idlist": "Configuration Item ID List"
          }
        }
      }
    },
    "getcientitylistapi": {
      "description": {
        "desc": "Obtain detailed information of multiple configuration items based on the ID list interface"
      },
      "getname": "Obtain detailed information of multiple configuration items"
    },
    "getcitypeapi": {
      "getname": "Obtain model type information"
    },
    "getciuniqueapi": {
      "getname": "Returns a list of unique attribute IDs"
    },
    "getdownwardcilistapi": {
      "getname": "Obtain downstream model list"
    },
    "getillegalcientitycountapi": {
      "getname": "Obtain the number of non compliant configuration items"
    },
    "getimportfieldlistapi": {
      "getname": "Obtain a list of importable attributes and relationships"
    },
    "getpasswordattrplaintextapi": {
      "getname": "Obtain password attribute plaintext",
      "output": {
        "param": {
          "desc": "Password plaintext"
        }
      }
    },
    "importciapi": {
      "getname": "Import Configuration Item Model"
    },
    "initcischemaapi": {
      "getname": "Initialize Model Data Table"
    },
    "listciapi": {
      "getname": "Return model list information (for dropdown boxes)"
    },
    "listcientityforselectapi": {
      "description": {
        "desc": "Query Content Center Status List"
      },
      "getname": "Query Model Data List (Dropdown Box)",
      "input": {
        "param": {
          "desc": {
            "defaultvalue": "Default Value List"
          }
        }
      },
      "output": {
        "param": {
          "desc": "Model Data List"
        }
      }
    },
    "listcientitystatusapi": {
      "getname": "Obtain configuration item alarm information"
    },
    "listcifortreeapi": {
      "description": {
        "desc": "Return the model tree list"
      },
      "getname": "Obtain a model tree list"
    },
    "listcitypeapi": {
      "getname": "Obtain a list of model types"
    },
    "listexpressionattrrelapi": {
      "getname": "Returns a list of model expression properties and relationships"
    },
    "resetattrentityindexapi": {
      "description": {
        "desc": "Rebuild the reference attribute index interface to optimize query performance"
      },
      "getname": "Rebuild Reference Attribute Index"
    },
    "resetrelentityindexapi": {
      "description": {
        "desc": "Rebuild the relational index interface to optimize query performance"
      },
      "getname": "Rebuild Relationship Index"
    },
    "savealertlevelapi": {
      "getname": "Save alarm level"
    },
    "saveallcitypeapi": {
      "getname": "Batch Save Model Types",
      "input": {
        "param": {
          "desc": {
            "citypelist": "Model Type List"
          }
        }
      }
    },
    "saveciapi": {
      "getname": "Save Model",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not provide a representative for adding a new model"
          }
        }
      }
    },
    "saveciauthapi": {
      "getname": "Save Model Authorization",
      "input": {
        "param": {
          "desc": {
            "authlist": "Authorization list, empty means clearing all authorizations. Example: {authType: \u0027user\u0027, authUuid: \u0027xxxx\u0027, action: \u0027cimaange\u0027}"
          }
        }
      }
    },
    "savecientityalertapi": {
      "getname": "Save Configuration Item Alert",
      "input": {
        "param": {
          "help": {
            "alertattr": "Each configuration item corresponds to an alarm attribute and can only have one alarm message",
            "alertlevel": "It must be an integer greater than or equal to 0. The higher the number, the higher the level. If it is equal to 0, it means the alarm is eliminated",
            "alerttime": "A timestamp needs to be provided, accurate to milliseconds. If not provided, the save time will be used",
            "cientityid": "If provided, it will be used first, and ciEntityUuid will only be used if the configuration item cannot be found",
            "uniquename": "If it is a 32 character hash, the system will directly save it. Otherwise, the system will perform hash processing first"
          }
        }
      }
    },
    "savecientityalertbatchapi": {
      "getname": "Batch save configuration item alarm",
      "input": {
        "param": {
          "help": "Use this parameter when saving data in bulk, and the parameter format is consistent with the requirements for a single alarm"
        }
      }
    },
    "savecinameattridapi": {
      "getname": "Save Model Name Properties"
    },
    "savecitypeapi": {
      "getname": "Save Model Type",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not exist to represent adding",
            "ismenu": "Is it displayed in the menu"
          }
        }
      }
    },
    "saveciuniqueruleapi": {
      "getname": "Save Model Unique Rules"
    },
    "searchalertlevelapi": {
      "getname": "Search alarm level"
    },
    "searchattrtargetcientityapi": {
      "getname": "Query Property Target Configuration Item",
      "input": {
        "param": {
          "desc": "Selected Value List"
        }
      },
      "output": {
        "param": {
          "desc": "Header information "
        }
      }
    },
    "searchciattrrellistapi": {
      "description": {
        "desc": "Search model properties and relationship information interface, mainly used for DSL input controls to search for properties and relationships"
      },
      "getname": "Search for model attributes and relationship information",
      "input": {
        "param": {
          "desc": {
            "keyword": "Keywords that only match unique identifiers of attributes and relationships"
          }
        }
      }
    },
    "searchcientityalertapi": {
      "getname": "Search for configuration item alarm information",
      "input": {
        "param": {
          "desc": {
            "groupidlist": "View ID List"
          },
          "help": {
            "groupidlist": "Cannot be empty at the same time as the configuration item id list",
            "idlist": "Cannot be empty at the same time as the view id list"
          }
        }
      }
    },
    "searchcientityapi": {
      "getname": "Query Configuration Items",
      "input": {
        "param": {
          "desc": {
            "attrid": "Relationship ID (used when querying reference properties through reference configuration items)",
            "cientitylist": "The configuration item result set, if provided, will not be searched, and will be returned directly after supplementing the header information",
            "condition": "A list of fields that need to be displayed, including attribute relationships and constants. For example, [ \"attr_xxx \":  \"keyword \",  \"relfrom_xxx \":  \"keyword \",  \"relto_xxx \":  \"keyword \",  \"const_ciid \":  \"keyword \"], where xxx represents the corresponding attribute or relationship ID",
            "direction": "The position of the current model in the relationship",
            "dsl": "DSL statement",
            "fromcientityid": "Reference configuration item ID (used when querying reference properties through reference configuration items)",
            "globalattrfilterlist": "Global Attribute Filter Criteria",
            "groupid": "Group ID",
            "idlist": "List of configuration item IDs that need to be queried",
            "isall": "Do you want to return all column data",
            "islimitattr": "Whether to restrict the returned reference attribute data",
            "islimitrel": "Whether to restrict the returned relationship data",
            "mode": "The dialog mode will not display detailed connections",
            "needaction": "Do you need an action column? If so, return the action column based on user permissions",
            "needactiontype": "Do you need an action type column, usually used in form controls to mark whether data is added, modified, or deleted",
            "needcheck": "Do you need a check column",
            "needexpand": "Do you need to display the expanded control column",
            "relcientityid": "Relationship configuration item ID",
            "relid": "Relationship ID",
            "sort": "Sort rules, example: { \"attr_xxxxx \":  \"DESC \",  \"attr_yyyyy \":  \"ASC \"}"
          }
        }
      }
    },
    "searchcientitybydslapi": {
      "getname": "Using DSL to query configuration items",
      "input": {
        "param": {
          "desc": {
            "attr": "The attributes that need to be returned. If not defined, all attributes will be returned. An empty array represents that no attributes will be returned",
            "dsl": "Query expression, Logical connective supports\u0026\u0026, | |, and relational operator supports:\u003d\u003d,\u003e\u003d,\u003c\u003d,\u003e,\u003c,!\u003d,like,not like, include, exclude. If you need to search for relationship or reference attribute fields, you can use a.b representation, such as env. name\u003d\u003d STG \u0026\u0026(port\u003d\u003d80 | | port\u003d\u003d443)",
            "rel": "The relationships that need to be returned. If not defined, all relationships will be returned. An empty array represents that no relationships will be returned"
          }
        }
      }
    },
    "searchcitypeciapi": {
      "getname": "Obtain model types and model lists",
      "input": {
        "param": {
          "desc": {
            "cinamelist": "Model Name List",
            "isabstract": "Abstract model, 0: No, 1: Yes",
            "isvirtual": "Virtual model, 0: No, 1: Yes",
            "typeidlist": "Type ID List"
          }
        }
      }
    },
    "searchcustomviewapi": {
      "getname": "Query Custom View",
      "input": {
        "param": {
          "help": {
            "ciid": "Only required when querying custom views of the scene"
          }
        }
      }
    },
    "searchcustomviewdataapi": {
      "getname": "Query custom view data",
      "input": {
        "param": {
          "desc": {
            "groupby": "Uuid of grouping attributes",
            "mode": "Search mode, supporting both page and API, mainly affecting the returned data structure. Page is the default mode used for page display, and the API will return field names for API calls",
            "searchmode": "Normal: view list mode, group: view list group mode, data: data mode"
          }
        }
      },
      "output": {
        "param": {
          "desc": {
            "datalist": "Result Set"
          }
        }
      }
    },
    "searchdeletecientityapi": {
      "getname": "Query deleted configuration items"
    },
    "searchillegalcientityapi": {
      "getname": "Query non compliant configuration items"
    },
    "updaterelentityvaliddayapi": {
      "getname": "Update relationship validity days",
      "input": {
        "param": {
          "desc": "Valid days, 0 represents forever valid"
        }
      }
    },
    "validatecientityapi": {
      "getname": "Verify the integrity of configuration items",
      "input": {
        "param": {
          "desc": {
            "attr": "attribute data ",
            "id": "Configuration item ID, does not exist to represent adding",
            "rel": "Relationship data",
            "uuid": "Configuration item uuid"
          }
        }
      },
      "output": {
        "param": {
          "desc": {
            "needchange": "Is there any change"
          }
        }
      }
    }
  },
  "nmcag": {
    "deleteglobalattrapi": {
      "getname": "Delete Global Attribute"
    },
    "getcientityglobalattrentityapi": {
      "getname": "Get Configuration Item Global Properties"
    },
    "getglobalattrapi": {
      "getname": "Get Global Properties"
    },
    "getuseractivegroupapi": {
      "getname": "Obtain the list of active groups for the current user“"
    },
    "saveglobalattrapi": {
      "getname": "Save Global Properties",
      "input": {
        "param": {
          "desc": "option"
        }
      }
    },
    "searchglobalattrapi": {
      "getname": "Query Global Properties"
    },
    "searchgraphapi": {
      "getname": "Search Topology View"
    }
  },
  "nmcar": {
    "listallcirelapi": {
      "getname": "Obtain a list of all relationships in the model"
    }
  },
  "nmcara": {
    "accountprotocolsaveapi": {
      "getname": "Save Account Management Agreement"
    },
    "appenvlistapi": {
      "getname": "Query the list of application module environments"
    },
    "listappmodulelistfortreeapi": {
      "getname": "Query Resource Module List Tree"
    }
  },
  "nmcarc": {
    "getresourceentityapi": {
      "getname": "Obtain resource view configuration information"
    },
    "listresourceentityapi": {
      "getname": "Obtain a list of resource center configurations"
    },
    "saveresourceentityapi": {
      "getname": "Save resource configuration information"
    }
  },
  "nmcarr": {
    "resourcetypetreeapi": {
      "getname": "Query Resource Type Tree List"
    },
    "saveresourcetypeapi": {
      "getname": "Save the root model of asset types"
    }
  },
  "nmcat": {
    "getcientitytopoapi": {
      "getname": "Obtain Configuration Item Topology",
      "input": {
        "param": {
          "desc": "layout"
        }
      }
    },
    "recovertransactionapi": {
      "getname": "Resume transactions"
    },
    "searchtransactionapi": {
      "getname": "inquiry transaction"
    }
  },
  "nmcdac": {
    "getcatalogapi": {
      "getname": "Get directory"
    },
    "savecatalogapi": {
      "getname": "Save Directory"
    },
    "searchcatalogapi": {
      "getname": "Get directory list"
    }
  },
  "nmcdag": {
    "getgraphapi": {
      "getname": "Obtain architecture diagram"
    },
    "savegraphapi": {
      "getname": "Save Architecture Diagram"
    }
  },
  "nmcdal": {
    "diagram_graph_modify": {
      "getauthdisplayname": "Architecture diagram editing permissions",
      "getauthintroduction": "Edit and delete permissions for architecture diagrams"
    }
  },
  "nmcdat": {
    "gettemplateapi": {
      "getname": "Obtain Template"
    },
    "savetemplateapi": {
      "getname": "Save Template"
    }
  },
  "nmcdaw": {
    "deletewidgetapi": {
      "getname": "Delete Elements"
    },
    "getallactivewidgetapi": {
      "getname": "List all active elements"
    },
    "getwidgetapi": {
      "getname": "Get Elements"
    },
    "listtemplatewidgetapi": {
      "getname": "Obtain template elements"
    },
    "savewidgetapi": {
      "getname": "Saving Elements"
    },
    "searchwidgetapi": {
      "getname": "Search for Elements"
    },
    "togglewidgetactiveapi": {
      "getname": "Activating or disabling elements"
    }
  },
  "nmcdd": {
    "graphversionvo": {
      "entityfield": {
        "name": "Editing time"
      }
    },
    "templatewidgetvo": {
      "entityfield": {
        "name": "Component ID"
      }
    },
    "widgetvo": {
      "entityfield": {
        "name": "shape"
      }
    }
  },
  "nmcde": {
    "widgetisinuseexception": {
      "widgetisinuseexception": "The current component is in use"
    }
  },
  "nmcps": {
    "cmdbprocessstephandlertype": {
      "cientitysync": "Configuration item synchronization",
      "cmdbsync": "CMDB synchronization"
    }
  },
  "nmda": {
    "exportdashboardapi": {
      "getname": "Export Dashboard"
    },
    "searchdashboardapi": {
      "getname": "Query Dashboard"
    },
    "searchtemplateapi": {
      "getname": "Query Template",
      "input": {
        "param": {
          "desc": "Parent template id"
        }
      }
    }
  },
  "nmdaa": {
    "downloaddeployappbuildapi": {
      "getname": "Download appbuild",
      "input": {
        "param": {
          "desc": {
            "subdirs": "Subdirectory"
          }
        }
      }
    },
    "exportdeployapppipelineapi": {
      "getname": "Export application pipeline"
    },
    "getdeployapppipelineapi": {
      "getname": "Obtain application pipeline",
      "input": {
        "param": {
          "desc": {
            "isdeletedisabledphase": "Do you want to delete the disabled stage"
          }
        }
      }
    },
    "importdeployapppipelineapi": {
      "getname": "Import application pipeline"
    },
    "savedeployapppipelineapi": {
      "getname": "Save application pipeline"
    },
    "savedeployapppipelinedraftapi": {
      "getname": "Save assembly line draft"
    }
  },
  "nmdaas": {
    "savedeployappconfigappsystemapi": {
      "getname": "Application system for saving and publishing application configurations"
    }
  },
  "nmdab": {
    "getsettingsapi": {
      "description": {
        "desc": "Interface for obtaining basic settings related information"
      },
      "getname": "Obtain information related to basic settings",
      "output": {
        "param": {
          "drcilist": {
            "desc": "Asset allocation"
          },
          "drdatacenterlist": {
            "desc": "Data Center List"
          },
          "drscenelist": {
            "desc": "Scene List"
          }
        }
      }
    }
  },
  "nmdac": {
    "callbackdeploycigitlabeventapi": {
      "getname": "Gitlab webhook callback API"
    },
    "callbackdeploycisvneventapi": {
      "getname": "SVN hook callback API",
      "input": {
        "param": {
          "desc": {
            "added": "The newly added documents submitted this time",
            "author": "Submitted by",
            "date": "Submission date",
            "deleted": "The files submitted for deletion this time",
            "dirschanged": "Affected directories",
            "ip": "SVN server IP",
            "message": "Submit Information",
            "modified": "Documents submitted for modification this time",
            "revision": "Submission ID"
          }
        }
      }
    },
    "downloaddeployciauditdetailapi": {
      "getname": "Download Continuous Integration Callback Interface Call Log"
    },
    "getdeployciauditdetailapi": {
      "getname": "Obtain Continuous Integration Callback Interface Call Log"
    },
    "getdrciapi": {
      "description": {
        "desc": "Obtain application type association model interface"
      },
      "getname": "Obtain application type association model"
    },
    "listdrciapi": {
      "description": {
        "desc": "Interface for obtaining asset configuration list"
      },
      "getname": "Obtain asset allocation list"
    },
    "savedeployciapi": {
      "getname": "Save Continuous Integration Configuration",
      "input": {
        "param": {
          "desc": {
            "reponame": "Warehouse name",
            "reposerveraddress": "Warehouse server address",
            "repotype": "Warehouse type",
            "versionrule": "Version number rules"
          }
        }
      }
    },
    "savedrciapi": {
      "description": {
        "desc": "Save Asset Configuration Interface"
      },
      "getname": "Save Asset Configuration"
    }
  },
  "nmdad": {
    "deletedrdatacenterapi": {
      "description": {
        "desc": "Delete Data Center Interface"
      },
      "getname": "Delete Data Center",
      "input": {
        "param": {
          "id": {
            "desc": "Data center ID"
          }
        }
      }
    },
    "getdrdatacenterapi": {
      "description": {
        "desc": "Obtain Data Center Interface"
      },
      "getname": "Obtain Data Center"
    },
    "listdrdatacenterapi": {
      "description": {
        "desc": "Obtain data center list interface"
      },
      "getname": "Obtain a list of data centers"
    },
    "savedrdatacenterapi": {
      "description": {
        "desc": "Save Data Center Interface"
      },
      "getname": "Save Data Center"
    }
  },
  "nmdaj": {
    "createmultideployjobapi": {
      "getname": "Create and execute publishing jobs"
    },
    "getdeployjobcreateinfoapi": {
      "getname": "Obtain initialization information for creating and publishing jobs"
    }
  },
  "nmdajb": {
    "getbatchdeployjobapi": {
      "getname": "Obtain individual batch job information"
    },
    "savebatchdeployjobapi": {
      "getname": "Save Batch Publish Job"
    }
  },
  "nmdao": {
    "deletedrorganizationapi": {
      "getname": "Delete organizational structure"
    },
    "deletedrorganizationuserapi": {
      "getname": "Delete users under organizational structure"
    },
    "savedrorganizationapi": {
      "getname": "Save organizational structure"
    },
    "savedrorganizationuserapi": {
      "getname": "Add Organizational Structure User"
    },
    "searchdrorganizationuserapi": {
      "getname": "Query user list under organizational structure",
      "input": {
        "param": {
          "orgid": {
            "desc": "Organization ID"
          }
        }
      }
    },
    "treedrorganizationapi": {
      "description": {
        "desc": "Obtain a complete tree of organizational structure"
      }
    }
  },
  "nmdap": {
    "getpipelineapi": {
      "getname": "Obtain detailed information about the super assembly line"
    }
  },
  "nmdas": {
    "checkdrservicedependencyrelationshipapi": {
      "getname": "Check if the dependency relationship between services is circular"
    },
    "deletedrserviceapi": {
      "getname": "Delete disaster recovery service"
    },
    "deletedrservicedatacenterapi": {
      "getname": "Delete data centers for disaster recovery services"
    },
    "deletedrservicedependencyrelationshipapi": {
      "getname": "Delete dependent service relationships for disaster recovery services"
    },
    "deletedrservicesceneapi": {
      "getname": "Scenario of deleting disaster recovery services"
    },
    "deletesceneapi": {
      "description": {
        "desc": "Delete scene interface"
      },
      "getname": "Delete Scene"
    },
    "getdrserviceapi": {
      "getname": "Obtain disaster recovery service information"
    },
    "getsceneapi": {
      "description": {
        "desc": "Obtain scene interface"
      },
      "getname": "Obtain scene information"
    },
    "listdrserviceforselectapi": {
      "getname": "Search for Disaster Recovery Service List (Dropdown Box)"
    },
    "listsceneapi": {
      "description": {
        "desc": "Get scene list interface"
      },
      "getname": "Obtain scene list"
    },
    "savedrserviceapi": {
      "getname": "Save disaster recovery services"
    },
    "savedrservicebaseinfoapi": {
      "getname": "Save basic information of disaster recovery services"
    },
    "savedrservicedatacenterapi": {
      "getname": "Data center for saving disaster recovery services"
    },
    "savedrservicedependencyrelationshipapi": {
      "getname": "Save dependency service relationships for disaster recovery services"
    },
    "savedrservicesceneapi": {
      "getname": "Scenario of saving disaster recovery services"
    },
    "savesceneapi": {
      "getname": "Save Scene",
      "input": {
        "param": {
          "sourceid": {
            "desc": "Migration Source Data Center ID"
          }
        }
      }
    },
    "searchdrserviceapi": {
      "getname": "Search for Disaster Recovery Service List"
    }
  },
  "nmdav": {
    "getdeployversioncommitdiffapi": {
      "getname": "Obtain and publish the corresponding version commit diff content"
    },
    "getdeployversioncvelistapi": {
      "getname": "Obtain version CVE vulnerability list"
    },
    "getdeployversionenvforautoexecapi": {
      "getname": "Obtain release version environment information"
    },
    "getdeployversionissuelistapi": {
      "description": {
        "desc": "Obtain version requirement list"
      }
    },
    "getdeployversiontheadapi": {
      "getname": "Query Release Version Header Configuration"
    },
    "savedeployversioncommitanalyzeapi": {
      "description": {
        "desc": "Save version analysis data"
      },
      "input": {
        "param": {
          "desc": {
            "commitlist": "Submit List",
            "fileaddcount": "Number of file additions",
            "filedeletecount": "Number of file deletions",
            "filemodifycount": "Number of file modifications",
            "lineaddcount": "Number of code line additions",
            "linedeletecount": "Code line reduction",
            "repo": "Project Source Address"
          }
        }
      }
    },
    "savedeployversioncvelistapi": {
      "getname": "Save version CVE vulnerability list"
    },
    "savedeployversiontheadapi": {
      "getname": "Save Release Version Header Configuration",
      "input": {
        "param": {
          "desc": {
            "config": "Meter header configuration"
          }
        }
      }
    }
  },
  "nmeas": {
    "eventsolutiongetapi": {
      "getname": "Obtain a single solution"
    }
  },
  "nmeat": {
    "eventtypesaveapi": {
      "getname": "Save event type information",
      "input": {
        "param": {
          "desc": {
            "authoritylist": "Authorization object, multiple choices allowed, format [ \"common # alluser \",  \"user # userUuid \",  \"team # teamUuid \",  \"role # roleUuid \"]"
          }
        }
      }
    },
    "eventtypetreesearchapi": {
      "getname": "Retrieve event type schema"
    }
  },
  "nmfs": {
    "checkupdatedatabaseviewhandler": {
      "getname": "Check the resource center view"
    },
    "documentonlineinitializeindexhandler": {
      "executeforalltenant": {
        "error": "There are two files with the same path: {0}. Please rename one of the files or move it to a different path",
        "system_out_println": "The location of the online document index library is {0}",
        "warn_a": "The filePath field in the {1st} element of the {0} file has no value set",
        "warn_b": "The moduleGroup field in the {1st} element of the {0} file has no value set"
      },
      "getname": "Initialize online help document index"
    }
  },
  "nmft": {
    "createdatawarehousetableinithandler": {
      "getname": "Create a data warehouse dynamic table"
    }
  },
  "nmiad": {
    "getinspectcollectapi": {
      "getname": "Obtain the inspection definition corresponding to the model"
    },
    "inspectcombopsearchapi": {
      "getname": "Query the list of inspection combination tools"
    }
  },
  "nmiaj": {
    "inspectautoexecjobnodesearchapi": {
      "getname": "Querying patrol job node assets"
    }
  },
  "nmian": {
    "getinspectnewproblemcustomviewapi": {
      "getname": "Obtain personal view classification of the latest inspection issues"
    }
  },
  "nmiar": {
    "inspectschedulesearchapi": {
      "getname": "Query the list of scheduled inspection tasks"
    },
    "listinspectappenvapi": {
      "getname": "Obtain a list of environments that initiate application patrols"
    }
  },
  "nmkac": {
    "knowledgecirclegetapi": {
      "getname": "Obtaining a Single Knowledge Circle"
    }
  },
  "nmkad": {
    "knowledgedocumentgetapi": {
      "getname": "Query Document Content",
      "input": {
        "param": {
          "desc": {
            "isreadonly": "Whether to increase browsing volume"
          }
        }
      }
    },
    "knowledgedocumentlistapi": {
      "getname": "Query Document List"
    },
    "knowledgedocumentsearchapi": {
      "getname": "Search for Documents"
    },
    "knowledgedocumentversiondeleteapi": {
      "getname": "Delete Document Version"
    }
  },
  "nmkat": {
    "knowledgedocumenttypetreeapi": {
      "getname": "Obtain a knowledge circle knowledge classification tree"
    },
    "knowledgedocumenttypetreeforselectapi": {
      "getname": "Obtain a knowledge circle knowledge classification tree_ Dropdown box"
    },
    "knowledgetemplategetapi": {
      "getname": "Obtain a single knowledge template"
    },
    "knowledgetypelistapi": {
      "getname": "Query knowledge classification list"
    }
  },
  "nmmaa": {
    "masterauthlistapi": {
      "getname": "Obtain a list of tenant management user permissions",
      "output": {
        "param": {
          "desc": {
            "return": "Permission List"
          }
        }
      }
    }
  },
  "nmmam": {
    "masterusersaveapi": {
      "description": {
        "desc": "System User Save Interface"
      },
      "getname": "System User Save"
    }
  },
  "nmmar": {
    "sendvalidcodeapi": {
      "description": {
        "desc": "Send the registration verification code to the corresponding email address"
      },
      "getname": "Send registration verification code"
    }
  },
  "nmmat": {
    "userroleteamsearchapi": {
      "getname": "User Role and Organizational Structure Query Interface"
    }
  },
  "nmme": {
    "activeurlexpiredtimeexception": {
      "activeurlexpiredtimeexception": "The activation connection has expired"
    },
    "emailnotsupportexception": {
      "emailnotsupportexception": "This type of mailbox is not supported, please use corporate email"
    },
    "illegalactiveurlexception": {
      "illegalactiveurlexception": "Activation of account failed. The link is illegal. Please contact the administrator"
    }
  },
  "nmpac": {
    "cataloggetapi": {
      "getname": "Service directory information acquisition interface"
    },
    "channelgetapi": {
      "getname": "Service channel obtaining information"
    },
    "channelsearchapi": {
      "getname": "Service channel search interface",
      "input": {
        "param": {
          "desc": {
            "isfavorite": "Do you want to only query the collected data"
          }
        }
      }
    }
  },
  "nmpacr": {
    "calalogbreadcrumbapi": {
      "getname": "Obtain all service directory path interfaces under a certain service directory"
    },
    "catalogtreeapi": {
      "getname": "Obtain all service directories (including hierarchical relationships) interfaces"
    },
    "channeltyperelationlistforselectapi": {
      "getname": "Query service type relationship list (dedicated to dropdown box)"
    }
  },
  "nmpap": {
    "batchabortprocesstaskapi": {
      "getname": "Batch cancellation of work orders"
    },
    "batchdeleteprocesstaskapi": {
      "getname": "Batch delete work orders"
    },
    "batchhideprocesstaskapi": {
      "getname": "Batch Hide Work Orders"
    },
    "batchpauseprocesstaskapi": {
      "getname": "Batch Suspend Work Orders"
    },
    "batchurgeprocesstaskapi": {
      "getname": "Batch reminder work orders"
    },
    "processgetapi": {
      "getname": "Obtain a single flowchart data interface"
    },
    "processsearchapi": {
      "getname": "Process List Search Interface",
      "input": {
        "param": {
          "desc": {
            "isicreated": "Do you want to only query the ones I created"
          }
        }
      }
    },
    "processtaskcurrentusertasklistapi": {
      "getname": "Current User Task List Interface"
    },
    "processtaskdraftgetapi": {
      "getname": "Work order draft data acquisition interface"
    },
    "processtaskrepeatsaveapi": {
      "getname": "Mark duplicate work order interface"
    },
    "processtaskstepgetapi": {
      "description": {
        "desc": "Interface for obtaining basic information of work order steps, including current step name, activation time, status, handler, assistance handler, processing time, form attribute display control, etc"
      },
      "getname": "Interface for obtaining basic information of work order steps"
    }
  },
  "nmpaw": {
    "searchworkcenterapi": {
      "description": {
        "desc": "Work Order Center Search Interface"
      },
      "getname": "Work Order Center Search Interface",
      "input": {
        "param": {
          "desc": {
            "conditionconfig": "Condition settings, if left blank, use the conditions saved in the database",
            "headerlist": "Displayed Fields"
          }
        }
      }
    }
  },
  "nmra": {
    "deletereportapi": {
      "getname": "Delete Report"
    },
    "getreportapi": {
      "getname": "Obtain report definition details"
    },
    "getreportinstanceapi": {
      "getname": "Obtain report details"
    },
    "getreporttypeapi": {
      "getname": "Obtain Report Classification"
    },
    "reportlistapi": {
      "description": {
        "desc": "Obtain a list of report definitions (template selection drop-down box for report instance editing panel)"
      },
      "getname": "Obtain a list of report definitions"
    },
    "savereportapi": {
      "getname": "Save Report Definition",
      "input": {
        "param": {
          "desc": {
            "sql": "Report Definition Data Source Configuration"
          }
        }
      }
    },
    "savewebhookdataapi": {
      "getname": "Accept Webhook push data",
      "input": {
        "param": {
          "desc": "token"
        }
      }
    },
    "searchreportapi": {
      "getname": "Query Report Definition"
    },
    "showreportdetailapi": {
      "getname": "Display Report"
    },
    "updatereportactiveapi": {
      "getname": "Change Report Definition Activation Status"
    }
  },
  "nmraa": {
    "activeappapi": {
      "getname": "Activate application"
    },
    "getallappapi": {
      "getname": "Get all application types"
    },
    "getappapi": {
      "getname": "Obtain application information",
      "input": {
        "param": {
          "desc": "Application ID"
        }
      }
    },
    "getappcompleterateapi": {
      "getname": "Obtain application completion rate"
    },
    "listprivateattrapi": {
      "getname": "Get all internal properties"
    },
    "listprojectappapi": {
      "getname": "Obtain project application list",
      "input": {
        "param": {
          "desc": {
            "ismine": "Do you want to only query the application list containing the current user\u0027s tasks",
            "ismyreported": "Whether to only query the application list reported by the current user",
            "needissuecount": "Do you need to return the number of tasks"
          }
        }
      }
    },
    "saveappconfigapi": {
      "getname": "Save application configuration"
    },
    "saveattrapi": {
      "getname": "Save Application Properties",
      "input": {
        "param": {
          "desc": {
            "id": "Attribute ID, does not provide a new representation"
          }
        }
      }
    },
    "searchprivateattrapi": {
      "getname": "Query application properties",
      "input": {
        "param": {
          "desc": {
            "needsystemattr": "Do you need system attributes"
          }
        }
      }
    },
    "unactiveappapi": {
      "getname": "Disable Application "
    },
    "updateappsortapi": {
      "getname": "Update app sorting"
    }
  },
  "nmrad": {
    "deletedashboardapi": {
      "getname": "Delete dashboard"
    },
    "getdashboardapi": {
      "getname": "Get dashboard"
    },
    "savedashboardapi": {
      "getname": "Save Dashboard",
      "input": {
        "param": {
          "desc": {
            "id": "ID, blank represents adding"
          }
        }
      }
    }
  },
  "nmrai": {
    "checkissueisfavoriteapi": {
      "getname": "Check if the task is being followed",
      "output": {
        "param": {
          "desc": "Whether to be followed, 0: No, 1: Yes"
        }
      }
    },
    "clearparentissueapi": {
      "getname": "Clear Parent Task Relationship"
    },
    "deletecommentapi": {
      "getname": "Delete Comment"
    },
    "deleteissueapi": {
      "getname": "Delete Task"
    },
    "deleteissuecostapi": {
      "getname": "Delete expenses"
    },
    "deleteissuerelapi": {
      "getname": "Delete task association relationship"
    },
    "getissuecostapi": {
      "getname": "Obtain expense details"
    },
    "listrelissueidapi": {
      "getname": "Obtain a list of relationship task IDs"
    },
    "saveissueapi": {
      "getname": "Save Task",
      "input": {
        "param": {
          "desc": {
            "attrlist": "Custom Property list",
            "id": "ID, does not provide a representative for adding a task",
            "name": "Task Name"
          }
        }
      }
    },
    "saveissuecostapi": {
      "getname": "Save expenses"
    },
    "searchissueapi": {
      "getname": "Search Task",
      "input": {
        "param": {
          "desc": {
            "fromid": "Source Task ID",
            "toid": "Target Task ID"
          }
        }
      }
    },
    "searchissuecostapi": {
      "getname": "Search expenses"
    },
    "toggleissueisfavoriteapi": {
      "getname": "Switching task attention status",
      "input": {
        "param": {
          "desc": {
            "isfavorite": "Whether to follow"
          }
        }
      }
    }
  },
  "nmrap": {
    "closeprojectapi": {
      "getname": "Close Project"
    },
    "deletepriorityapi": {
      "getname": "Delete Priority",
      "input": {
        "param": {
          "desc": "Priority ID"
        }
      }
    },
    "deleteprojectapi": {
      "getname": "delete item"
    },
    "listprojecttemplateapi": {
      "getname": "Obtain a list of project templates"
    },
    "listprojectuserapi": {
      "getname": "Obtain project user list"
    },
    "openprojectapi": {
      "getname": "Open Project"
    },
    "savepriorityapi": {
      "description": {
        "desc": "Save Priority"
      },
      "input": {
        "param": {
          "desc": {
            "id": "Priority ID, does not provide a representative for adding"
          }
        }
      }
    },
    "saveprojectapi": {
      "getname": "Save Project",
      "input": {
        "param": {
          "desc": {
            "id": "ID, does not provide a representative for adding new projects",
            "memberidlist": "List of project member IDs"
          }
        }
      }
    },
    "saveprojecttemplatefromprojectapi": {
      "getname": "Save Project as Template"
    },
    "saveprojectuserapi": {
      "getname": "Add Project User"
    },
    "searchprojectapi": {
      "getname": "Query items"
    },
    "updateprioritysortapi": {
      "getname": "Update priority sorting",
      "input": {
        "param": {
          "desc": {
            "prioritylist": "Priority List "
          }
        }
      }
    }
  },
  "nmras": {
    "getreportstatementapi": {
      "getname": "Obtain a single report"
    },
    "liststatusapi": {
      "getname": "Get application status list",
      "input": {
        "param": {
          "desc": {
            "needissuecount": "Whether to count the number of tasks",
            "status": "The current status, if provided, will only list the reachable status list. If 0, it represents obtaining the start status and the reachable status list of the start status"
          }
        }
      }
    },
    "reportsendjobgetapi": {
      "getname": "Obtain report sending plan"
    },
    "savestatusapi": {
      "getname": "Save application status",
      "input": {
        "param": {
          "desc": {
            "id": "Status ID, do not provide a representative to add"
          }
        }
      }
    },
    "updatestatussortapi": {
      "getname": "Update status sorting"
    }
  },
  "nmrat": {
    "deleteprojecttemplateapi": {
      "getname": "Delete Project Template"
    },
    "getprojecttemplateapi": {
      "getname": "Obtain project template details"
    },
    "saveprojecttemplateapi": {
      "getname": "Save Project Template"
    }
  },
  "nmraw": {
    "getwebhookconfigapi": {
      "getname": "Obtain Webhook configuration"
    },
    "savewebhookconfigapi": {
      "getname": "Save webhook configuration"
    }
  },
  "nmrcaw": {
    "searchwebhookdataapi": {
      "getname": "Search for webhook data"
    }
  },
  "nmtaa": {
    "apiauditdetaildownloadapi": {
      "getname": "Download interface call records"
    },
    "apiauditdetailgetapi": {
      "getname": "Obtain interface call records"
    },
    "apihelpexportapi": {
      "getname": "Export Interface Help Document",
      "input": {
        "param": {
          "desc": {
            "funcid": "Function of the interface"
          }
        }
      }
    }
  },
  "nmtac": {
    "getchangelogversionapi": {
      "description": {
        "desc": "Interface for querying the change version log list"
      },
      "getname": "Query Change Version Log Details",
      "output": {
        "param": {
          "version": "Version Log"
        }
      }
    },
    "searchchangelogversionapi": {
      "getname": "Query Change Version Log List",
      "output": {
        "param": {
          "desc": "Version List"
        }
      }
    }
  },
  "nmtad": {
    "adddocumentonlineconfigapi": {
      "getname": "Add mapping relationship between online help documents and module menus"
    },
    "deletedocumentonlineconfigapi": {
      "getname": "Delete the mapping relationship between online help documents and module menus"
    },
    "executedatasourceapi": {
      "getname": "Perform data warehouse data source data synchronization"
    },
    "exportdocumentonlineconfigapi": {
      "getname": "Export online help document configuration file"
    },
    "getdocumentonlineapi": {
      "getname": "Obtain a single online help document"
    },
    "getdocumentonlinedirectoryapi": {
      "getname": "Online Help Document Directory"
    },
    "getdocumentonlinelistapi": {
      "getname": "Query the list of online help documents"
    },
    "getdocumentonlinetablelistapi": {
      "getname": "Display document list grouped by first level directory"
    },
    "getdocumentonlineunclassifiedlistapi": {
      "getname": "Query the list of unclassified online help documents"
    },
    "savedocumentonlineconfigapi": {
      "getname": "Save the mapping relationship between online help documents and module menus"
    },
    "searchdatasourceapi": {
      "getname": "Query Data Warehouse Data Source"
    },
    "searchdocumentonlineapi": {
      "getname": "Keyword search for online help documents",
      "mydoservice": {
        "error": "Unable to find document with docID {0}"
      }
    }
  },
  "nmtaf": {
    "downloadimageapi": {
      "getname": "Image download interface"
    }
  },
  "nmtai": {
    "exportapi": {
      "getname": "Universal export interface"
    },
    "importapi": {
      "getname": "Universal import interface"
    },
    "integrationauditdetaildownloadapi": {
      "getname": "Download integrated management call records"
    },
    "integrationauditdetailgetapi": {
      "getname": "Obtain integrated management audit content"
    }
  },
  "nmtal": {
    "getlicenseapi": {
      "getname": "Obtaining License Information"
    }
  },
  "nmtam": {
    "exportmatrixapi": {
      "getname": "Export Matrix"
    },
    "importmatrixapi": {
      "getname": "Import Matrix",
      "output": {
        "param": {
          "desc": {
            "labelduplication": "Label already exists",
            "nameduplication": "Name already exists",
            "uuidduplication": "Same matrix exists"
          }
        }
      }
    },
    "mailservergetapi": {
      "getname": "Email server information acquisition interface"
    },
    "mailserversaveapi": {
      "getname": "Save Mail Server Information"
    },
    "mailservertestapi": {
      "getname": "Test whether the mail server can send mail normally"
    },
    "matrixexportapi": {
      "getname": "Export matrix data"
    },
    "matriximportapi": {
      "getname": "Import matrix data"
    }
  },
  "nmtan": {
    "getnotifypolicydefaulttemplateapi": {
      "getname": "Obtain default template for notification policy trigger points"
    },
    "notifypolicyhandlerlistapi": {
      "getname": "Notification Policy Classification List"
    }
  },
  "nmtar": {
    "runnerregisterapi": {
      "description": {
        "desc": "Runner registration interface, directly determining a runner by IP"
      },
      "getname": "Register Runner",
      "input": {
        "param": {
          "nettyport": "Heartbeat Port",
          "port": "Command Port"
        }
      }
    },
    "runnersaveapi": {
      "getname": "Save runner",
      "input": {
        "param": {
          "authlist": "Runner external authentication information",
          "isauth": "Is it certified"
        }
      }
    }
  },
  "nmtas": {
    "getserverlistapi": {
      "getname": "Obtain a list of server information"
    },
    "jobclassgetapi": {
      "getname": "Obtain timed job component information"
    },
    "jobgetapi": {
      "getname": "Obtain public scheduled job information"
    },
    "saveserverapi": {
      "getname": "Save server information"
    },
    "systemnoticepullapi": {
      "getname": "Pull system announcement",
      "input": {
        "param": {
          "desc": {
            "direction": "Before: Find the announcement before issueTime"
          }
        }
      },
      "output": {
        "param": {
          "desc": {
            "popupnoticeidlist": "List of announcement IDs that need to pop up"
          }
        }
      }
    }
  },
  "nmtat": {
    "gettenantconfigapi": {
      "getname": "Obtain current tenant configuration information"
    },
    "listtenantconfigapi": {
      "getname": "List of current tenant configuration information"
    },
    "savetenantconfigapi": {
      "getname": "Save current tenant configuration information"
    }
  },
  "nmtau": {
    "getcurrentusertokenapi": {
      "getname": "Obtain the user\u0027s own token"
    },
    "getusertokenapi": {
      "getname": "Obtain the user\u0027s token"
    },
    "resetcurrentusertokenapi": {
      "getname": "Reset the user\u0027s own token",
      "output": {
        "param": {
          "return": {
            "desc": "New token"
          }
        }
      }
    },
    "resetusertokenapi": {
      "getname": "Reset user\u0027s token"
    },
    "userdeleteapi": {
      "getname": "Delete User Interface"
    },
    "usersaveapi": {
      "getname": "Save User Interface"
    },
    "usersearchapi": {
      "getname": "Query Users"
    },
    "usersearchforselectapi": {
      "getname": "Query Users_ drop-down ",
      "input": {
        "param": {
          "desc": {
            "needteam": "Do you need group information"
          }
        }
      }
    }
  },
  "nmtaw": {
    "getwechatapi": {
      "getname": "Obtaining Enterprise WeChat Data"
    },
    "savewechatapi": {
      "getname": "Saving Enterprise WeChat Data"
    },
    "testwechatapi": {
      "getname": "Testing Enterprise WeChat Sending Messages",
      "input": {
        "param": {
          "desc": {
            "touser": "Enterprise WeChat account"
          }
        }
      }
    }
  },
  "ocommn": {
    "isneedpage": "Do you need pagination"
  },
  "page": {
    "isclose": "Whether to close",
    "ismine": "Is it mine"
  },
  "term": {
    "appsystemidlist": "Application System ID List",
    "autoexec": {
      "allphasesarerunnerorsqlexecmode": "All stages are Runner or SQL execution mode",
      "assignexecuser": "Specify Execution User",
      "catalog": "Tool Catalog",
      "catalogid": "Tool Catalog ID",
      "combopbaseinfo": "Basic information of combination tools",
      "combopdetailsinfo": "Combination Tool Details",
      "combopid": "Combination tool ID",
      "configexpired": "Configuration has expired",
      "configexpiredreason": "Reason for configuration failure",
      "customtemplate": "Custom Template",
      "customtemplateid": "Custom Template ID",
      "execmode": "Execution method",
      "executeconfig": "Execution Objectives",
      "executeparam": "Execution parameters",
      "freeparam": "Free parameter",
      "globalparam": "Global parameters",
      "groupdesc": "Automation platform",
      "groupname": "Automation",
      "inputparamlist": "Input parameter list",
      "islib": "Is it a library file",
      "jobid": "Job ID",
      "jobinfo": "Automated job information",
      "jobparamlist": "Job parameter list",
      "linelist": "Script Content Line Data List",
      "name": "Autoexec",
      "needexecutenode": "Do you need to set execution targets for the execution page",
      "needexecuteuser": "Do you need to set the execution user for the execution page",
      "needprotocol": "Do you need to set a connection protocol for the execution page",
      "needroundcount": "Do you need to set the batch quantity for the execution page",
      "outputparamlist": "Output parameter list",
      "passthroughenv": "Return parameters",
      "phase": "Assignment Script Name",
      "profile": "Preset parameter set",
      "risk": "Operation level",
      "riskid": "Operation level ID",
      "riskname": "Operation level name",
      "roundcount": "Batch quantity",
      "scenario": "scene",
      "scenarioid": "Scenario ID",
      "scenarioname": "Scene Name",
      "scheduleinfo": "Automated scheduled job information",
      "script": "Custom Tools",
      "scriptinfo": "Script Content",
      "scriptparser": "Script Parser",
      "serviceinfo": "Automation Service Catalog Information",
      "tool": "tool",
      "type": "Tool classification",
      "typeid": "Script classification ID",
      "userlib": "Dependency tools"
    },
    "change": {
      "name": "Change"
    },
    "cmdb": {
      "abbrname": "for short",
      "addid": "ID, do not provide a representative to add",
      "allowedit": "Allow editing",
      "appmoduleabbrname": "Application Module Abbreviation",
      "appmoduleid": "Application module ID",
      "appmoduleidlist": "Application module ID list",
      "appmodulename": "Application Module Name",
      "appsystemabbrname": "Application System Abbreviation",
      "appsystemid": "Application system ID",
      "appsystemname": "Application system name",
      "attr": "attribute",
      "attrconfig": "Attribute Configuration",
      "attridlist": "Model Attribute ID List",
      "attrtype": "Attribute Type",
      "cientitydata": "Configuration Item Data",
      "cientityid": "Configuration Item ID",
      "cientityuniquename": "Unique identification of configuration items",
      "ciid": "Model ID",
      "ciidlist": "Model ID List",
      "ciinfo": "Model Information",
      "cilist": "Model List",
      "ciname": "Model Name",
      "ciuniquename": "Model Unique Identification",
      "envid": "Environment ID",
      "envidlist": "Environment ID List",
      "envname": "Environment name",
      "globalattr": "Global Properties",
      "groupdesc": "Configuration Management Platform",
      "groupname": "CMDB",
      "importauditid": "Import Record ID",
      "ip": "IP address",
      "isabstractci": "Is it an abstract model",
      "isbackbone": "Show only backbone",
      "iscommit": "Submit or not",
      "ishasenv": "Does it include the environment",
      "isprivateci": "Private model or not",
      "isshowinmenu": "Is it displayed in the menu",
      "issimpleattribute": "Is it a simple attribute",
      "isvirtualci": "Is it a virtual model",
      "joinlist": "Connection List",
      "maintenancewindow": "Maintenance Window",
      "moduleid": "Module ID",
      "modulename": "Module abbreviation",
      "name": "CMDB",
      "nodelist": "Node List",
      "parentcientityid": "Parent Configuration Item ID",
      "port": "Protocol Port",
      "protocol": "protocol",
      "protocolidlist": "Protocol ID List",
      "rel": "relationship",
      "relidlist": "Model Relationship ID List",
      "resourceentityinfo": "Resource View Information",
      "resourceid": "Resource ID",
      "resourcename": "Resource Name",
      "rootciid": "Root Model ID",
      "rootciname": "Root Model Name",
      "ruleid": "Rule ID",
      "startciid": "Starting Model ID",
      "stateidlist": "Status ID List",
      "sysname": "System abbreviation",
      "targetciid": "Target Model ID",
      "transactiongroupid": "Transaction group ID",
      "transactionid": "Transaction ID",
      "typeidlist": "Resource Type ID List",
      "validateconfig": "proof setup ",
      "validatehandler": "Verification component",
      "validatorid": "Validation Rule ID",
      "vendoridlist": "List of vendor IDs",
      "viewid": "View ID",
      "viewname": "View Name",
      "virtualcifileid": "Virtual model configuration file id"
    },
    "codehub": {
      "groupdesc": "Codehub platform",
      "name": "Codehub"
    },
    "dashboard": {
      "groupdesc": "Flexible and efficient Data and information visualization platform",
      "groupname": "Dashboard",
      "name": "Dashboard"
    },
    "deploy": {
      "apppipeline": "Publishing application pipeline",
      "apppipelineinfo": "Application pipeline configuration information",
      "ciid": "Continuous Integration Configuration ID",
      "confidence": "confidence",
      "cvecount": "CVE Count",
      "cvelist": "CVE vulnerability list",
      "evidencecount": "Evidence count",
      "groupdesc": "Standardized and fast continuous integration deployment platform",
      "groupname": "DevOps",
      "highestseverity": "Maximum Severity",
      "lanelist": "Channel List",
      "name": "DevOps",
      "packageurl": "Package Details Address",
      "proxytourl": "Proxy address",
      "runnerid": "Executor ID",
      "scheduleinfo": "Publish scheduled job information",
      "version": "version",
      "vulnerabilityid": "Vulnerability ID",
      "vulnerabilityids": "Vulnerability ID",
      "vulnerabilityurl": "Vulnerability Details Page Address"
    },
    "diagram": {
      "activeversion": "Activate version",
      "catalogitem": "Catalog Entry",
      "editversion": "Edit version",
      "isstarttemplate": "Start template or not",
      "name": "Design drawings",
      "parentid": "Parent node ID",
      "parentuuid": "Parent node uuid"
    },
    "dr": {
      "customparamlist": "Custom Parameter List",
      "datacenterid": "Disaster Recovery Data Center ID",
      "datacenterlist": "List of data centers associated with services",
      "datacentername": "Disaster recovery data center name",
      "dependencyonmeservicelist": "Rely on my service list",
      "dependencyonservicelist": "List of services I rely on",
      "dependencyserviceid": "Dependent Service ID",
      "dependencyservicename": "Dependent service name",
      "drapptype": {
        "getenumname": "Application Type"
      },
      "drapptypeappsystem": "Application system",
      "drapptypebasicservices": "Basic services",
      "drapptypenetwork": "Network",
      "highavailabilityscenelist": "High availability scenario list",
      "name": "Disaster recovery switching module",
      "orgid": "Disaster recovery organization ID",
      "publicapplicationidlist": "Public Service ID List",
      "publicapplicationlist": "Public Service List",
      "recoverypointobjective": "The duration of the most likely data loss",
      "recoverytimeobjective": "The maximum time required from the occurrence of a disaster to the restoration of the entire system to normal",
      "scenelist": "List of scenarios associated with services",
      "sourcename": "The data center name of the scenario source",
      "sourcesceneid": "Source Scenario ID",
      "sourcescenename": "Source Scene Name",
      "targetname": "The data center name of the scene target",
      "targetsceneid": "Target Scene ID",
      "targetscenename": "Target Scene Name"
    },
    "event": {
      "eventtypeid": "Saved Event Type ID",
      "eventtypelist": "Associated event types",
      "name": "Event"
    },
    "framework": {
      "agentid": "Enterprise Application ID",
      "corpid": "Enterprise ID",
      "corpsecret": "Applied credential key",
      "documentonlineinfo": "Online Help Document Information",
      "domain": "domain name",
      "groupname": "Framework",
      "issuetime": "Issuance time",
      "matrixuuid": "Matrix uuid",
      "name": "Framework",
      "notifypolicydefaulttemplateinfo": "Notification default template information",
      "pinyin": "Pinyin",
      "policyid": "Notification Policy ID",
      "serverid": "Server ID",
      "serveripport": "server address",
      "smpthost": "SMTP host",
      "smptport": "SMTP port",
      "smptsslenable": "Whether to use SSL",
      "team": {
        "fullpath": "Grouping full path",
        "parentpathlist": "Parent Path List"
      },
      "user": {
        "viplevel": "VIP level"
      },
      "userotherinfo": "Other user information",
      "viplevel": "User level"
    },
    "inspect": {
      "fields": "Data Structure List",
      "groupdesc": "Inspection platform",
      "groupname": "Inspection",
      "inspectjobphasenodestatuslist": "Inspection job status list",
      "inspectstatuslist": "Inspection status list",
      "name": "Inspection",
      "thresholds": "Threshold Rule List"
    },
    "itsm": {
      "caneditfocususer": "Do you have permission to modify the work order followers",
      "cataloginfo": "Service Catalog Information",
      "catalogname": "Directory name where the service is located",
      "cataloguuid": "Service directory uuid",
      "channelinfo": "Service Information",
      "channelname": "Service Name",
      "channelpath": "Service Path",
      "channeltypeinfo": "Service Type Information",
      "channeltypename": "Service Type Name",
      "channeltyperelationid": "Service Type Relationship ID",
      "channeltyperelationname": "Transfer/Association Type",
      "channeltypeuuid": "Service type uuid",
      "channeluuid": "Service uuid",
      "commentlist": "Comment Attachment List",
      "copyprocesstaskid": "Copy job ID",
      "currentprocesstaskid": "Current job ID",
      "currentprocesstaskstep": "Current step information of the work order",
      "formattributehidelist": "Form Configuration Authorization Hidden Attribute uuid List",
      "formconfigauthoritylist": "Authorization List for Work Order Form Information",
      "fromprocesstaskid": "Source work order ID",
      "groupdesc": "One stop service reporting tracking processing platform",
      "groupname": "ITSM",
      "ishasoldformprop": "Is there any old work order form information",
      "isshowbaseinfo": "Is the basic information expanded by default on the work order details page",
      "isshowprocesstaskstepcommenteditortoolbar": "Show work order step reply rich text editor toolbar",
      "mobileformuitype": "Mobile form interaction type, 1: Exploring pages; 0: Current Page",
      "name": "ITSM",
      "ownercompanylist": "List of companies owned by the work order",
      "ownerdepartmentlist": "List of departments for the work order owner",
      "ownerinfo": "Work order owner information",
      "ownername": "Work order owner name",
      "owneruuid": "Work order owner uuid",
      "processtaskformattributedata": "Work Order Form Attribute Values",
      "processtaskformconfig": "Work Order Form Information",
      "processtaskid": "Work Order ID",
      "processtaskidlist": "Work Order Id List",
      "processtaskinfo": "Work Order Information",
      "processtaskslalist": "SLA List",
      "processtaskstepid": "Work Order Step ID",
      "processuuid": "Process uuid",
      "redosteplist": "Redo Step List",
      "repeatprocesstaskidlist": "List of duplicate job IDs",
      "scoretemplate": "Scoring template",
      "serialnumber": "Work order number",
      "sourcechanneltypeuuid": "Source Service Type uuid",
      "sourcechanneluuid": "Source service uuid",
      "startprocesstaskstep": "Work order start step information",
      "submitterinfo": "Work order submitter information",
      "submittername": "Work order submitter name",
      "submitteruuid": "Work order submitter Uuid",
      "tranferreportdirection": "Transfer/Related Direction",
      "tranferreportprocesstasklist": "Report Work Order Information List",
      "workcenterprocesstasksortindex": "Work Order Center Work Order Sorting Index"
    },
    "knowledge": {
      "circleinfo": "Knowledge Circle Information",
      "documentid": "Document ID",
      "documentinfo": "Document content",
      "documentversionid": "Document version ID",
      "groupdesc": "Knowledge platform",
      "groupname": "Knowledge",
      "name": "Knowledge",
      "reviewdate": "Approval time",
      "templateinfo": "Knowledge template information",
      "typepath": "Knowledge Circle Classification Path"
    },
    "master": {
      "groupname": "Master",
      "name": "Master"
    },
    "pbc": {
      "groupdesc": "Submission module of financial Information infrastructure management platform"
    },
    "pdb": {
      "name": "PBC"
    },
    "rdm": {
      "allowimport": "Allow Import",
      "allowsearch": "Allow search",
      "allowsort": "Allow sorting",
      "appattr": "apply property",
      "appcolor": "Apply Color",
      "applist": "Application List",
      "apptype": "Application Type",
      "attrbelong": "Application type to which the attribute belongs",
      "auditcount": "Modify Historical Quantity",
      "childrentaskcount": "Number of subtasks",
      "childtaskid": "Subtask ID",
      "commonid": "Comment ID",
      "costdate": "Spending date",
      "costlist": "Spend List",
      "costtime": "Labor hours spent",
      "dashboardid": "Dashboard ID",
      "enddate": "Expected end",
      "gantt": "Gantt chart Chart",
      "groupdesc": "RDM platform",
      "groupname": "RDM",
      "isend": "Is it over",
      "ismytask": "Is it my task",
      "isopen": "Is it enabled",
      "isprivateattr": "Private attribute or not",
      "issuecount": "Number of tasks",
      "issueid": "Task ID",
      "iterationid": "Iteration ID",
      "iterationname": "Iteration Name",
      "name": "RDM",
      "parenttaskid": "Parent Task ID",
      "plantimecost": "Estimated time consumption",
      "project": {
        "manageridlist": "List of project leader IDs",
        "useridlist": "List of project member user IDs"
      },
      "projectid": "Project ID",
      "projectleader": "Project leader",
      "projectmember": "Project members",
      "projectname": "entry name",
      "projectowner": "Project Owner",
      "projecttype": "Project Type",
      "relapp": "Related applications",
      "relativetasklist": "Associated Task List",
      "reldirection": "Relationship direction",
      "startdate": "Expected start",
      "startenddate": "Starting and ending dates",
      "storywall": "Story Wall"
    },
    "report": {
      "groupdesc": "Intelligent data analysis platform",
      "groupname": "Report",
      "name": "Report",
      "reportinstanceid": "Report instance ID",
      "sendplaninfo": "Send Plan Information"
    },
    "tagent": {
      "name": "Tagent"
    },
    "tenant": {
      "name": "Tenant"
    }
  }
}